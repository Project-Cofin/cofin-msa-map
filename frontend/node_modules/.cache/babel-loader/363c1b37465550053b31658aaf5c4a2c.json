{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bitcamp\\\\ai-work\\\\cofin-msa-organ\\\\frontend\\\\src\\\\features\\\\chatbot\\\\components\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport ChatBot from \"react-simple-chatbot\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport { render } from \"@testing-library/react\";\nimport { useDispatch } from \"react-redux\";\nimport { answer } from \"../reducer/chatbotSlice\";\nimport { func } from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Chat() {\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: {\n      background: \"#f5f8fb\",\n      fontFamily: \"Helvetica Neue\",\n      headerBgColor: \"#EF6C00\",\n      headerFontColor: \"#fff\",\n      headerFontSize: \"15px\",\n      botBubbleColor: \"#EF6C00\",\n      botFontColor: \"#fff\",\n      userBubbleColor: \"#fff\",\n      userFontColor: \"#4a4a4a\"\n    },\n    children: /*#__PURE__*/_jsxDEV(ChatBot, {\n      steps: [{\n        id: 'welcome',\n        message: '안녕하세요~ 코핀 챗봇이에요 궁금한 사항을 물어봐주세요',\n        trigger: 'submit'\n      }, {\n        id: \"submit\",\n        options: [{\n          value: \"y\",\n          label: \"백신 접종 자가 체크리스트\",\n          trigger: \"bot-response\"\n        }, {\n          value: \"n\",\n          label: \"질문하기\",\n          trigger: \"userinput\"\n        }]\n      }, {\n        id: 'userinput',\n        user: true,\n        trigger: 'bot-response'\n      }, // {\n      //   id: 'bot-response',\n      //   message: '질문 내용이 {previousValue}(이)가 맞습니까?',\n      //   trigger: 'user-input'\n      // },\n      {\n        id: \"bot-response\",\n        component: /*#__PURE__*/_jsxDEV(Post, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 24\n        }, this),\n        asMessage: true,\n        trigger: 'userinput'\n      }],\n      botAvatar: require(\"./data/icon.png\").default,\n      userAvatar: require(\"./data/user.png\").default\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n_c = Chat;\n;\nexport function Post(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const [text, setText] = useState(); // console.log(props.steps.submit.value)\n\n  if (props.steps.userinput == null) {\n    console.log(props.steps.submit.value);\n  } else {\n    console.log(props.steps.userinput.value);\n  } // useEffect(()=>{\n  //   setText(props.steps.userinput.value)\n  //   // dispatch(answer(props.steps.userinput.value))\n  // },[text])\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uC774(\\uAC00) \\uB77C\\uACE0 \\uC9C8\\uBB38\\uD558\\uC2E0 \\uAC83\\uC774 \\uB9DE\\uC2B5\\uB2C8\\uAE4C?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Post, \"NdejKEdlv6pflFuRL95twaGXMlM=\", false, function () {\n  return [useDispatch];\n});\n\n_c2 = Post;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Chat\");\n$RefreshReg$(_c2, \"Post\");","map":{"version":3,"sources":["C:/Users/bitcamp/ai-work/cofin-msa-organ/frontend/src/features/chatbot/components/Chat.js"],"names":["ChatBot","React","Component","useEffect","useState","ThemeProvider","render","useDispatch","answer","func","Chat","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","id","message","trigger","options","value","label","user","component","asMessage","require","default","Post","props","dispatch","text","setText","steps","userinput","console","log","submit"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,IAAT,QAAqB,YAArB;;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC7B,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE,SADP;AAELC,MAAAA,UAAU,EAAE,gBAFP;AAGLC,MAAAA,aAAa,EAAE,SAHV;AAILC,MAAAA,eAAe,EAAE,MAJZ;AAKLC,MAAAA,cAAc,EAAE,MALX;AAMLC,MAAAA,cAAc,EAAE,SANX;AAOLC,MAAAA,YAAY,EAAE,MAPT;AAQLC,MAAAA,eAAe,EAAE,MARZ;AASLC,MAAAA,aAAa,EAAE;AATV,KADT;AAAA,2BAaE,QAAC,OAAD;AACE,MAAA,KAAK,EAAE,CACL;AACEC,QAAAA,EAAE,EAAE,SADN;AAEEC,QAAAA,OAAO,EAAE,gCAFX;AAGEC,QAAAA,OAAO,EAAE;AAHX,OADK,EAML;AACEF,QAAAA,EAAE,EAAE,QADN;AAEEG,QAAAA,OAAO,EAAE,CACP;AAAEC,UAAAA,KAAK,EAAE,GAAT;AAAcC,UAAAA,KAAK,EAAE,gBAArB;AAAuCH,UAAAA,OAAO,EAAE;AAAhD,SADO,EAEP;AAAEE,UAAAA,KAAK,EAAE,GAAT;AAAcC,UAAAA,KAAK,EAAE,MAArB;AAA6BH,UAAAA,OAAO,EAAE;AAAtC,SAFO;AAFX,OANK,EAaL;AACEF,QAAAA,EAAE,EAAE,WADN;AAEEM,QAAAA,IAAI,EAAE,IAFR;AAGEJ,QAAAA,OAAO,EAAE;AAHX,OAbK,EAkBL;AACA;AACA;AACA;AACA;AAEA;AACEF,QAAAA,EAAE,EAAE,cADN;AAEEO,QAAAA,SAAS,eAAE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,gBAFb;AAGEC,QAAAA,SAAS,EAAE,IAHb;AAIEN,QAAAA,OAAO,EAAE;AAJX,OAxBK,CADT;AAiCE,MAAA,SAAS,EAAEO,OAAO,CAAC,iBAAD,CAAP,CAA2BC,OAjCxC;AAkCE,MAAA,UAAU,EAAED,OAAO,CAAC,iBAAD,CAAP,CAA2BC;AAlCzC;AAAA;AAAA;AAAA;AAAA;AAbF;AAAA;AAAA;AAAA;AAAA,UADF;AAoDD;KArDuBpB,I;AAqDvB;AAED,OAAO,SAASqB,IAAT,CAAcC,KAAd,EAAoB;AAAA;;AACzB,QAAMC,QAAQ,GAAG1B,WAAW,EAA5B;AACA,QAAM,CAAE2B,IAAF,EAAQC,OAAR,IAAmB/B,QAAQ,EAAjC,CAFyB,CAGzB;;AACA,MAAI4B,KAAK,CAACI,KAAN,CAAYC,SAAZ,IAAyB,IAA7B,EAAkC;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACI,KAAN,CAAYI,MAAZ,CAAmBhB,KAA/B;AACD,GAFD,MAEK;AACHc,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACI,KAAN,CAAYC,SAAZ,CAAsBb,KAAlC;AACD,GARwB,CASzB;AACA;AACA;AACA;;;AACE,sBACE;AAAA,2BAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA,mBADF;AAMH;;GAnBeO,I;UACGxB,W;;;MADHwB,I","sourcesContent":["import ChatBot from \"react-simple-chatbot\";\r\nimport React, { Component, useEffect, useState } from \"react\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { render } from \"@testing-library/react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { answer } from \"../reducer/chatbotSlice\";\r\nimport { func } from \"prop-types\";\r\n\r\nexport default function Chat() {\r\n  return (\r\n    <ThemeProvider\r\n      theme={{\r\n        background: \"#f5f8fb\",\r\n        fontFamily: \"Helvetica Neue\",\r\n        headerBgColor: \"#EF6C00\",\r\n        headerFontColor: \"#fff\",\r\n        headerFontSize: \"15px\",\r\n        botBubbleColor: \"#EF6C00\",\r\n        botFontColor: \"#fff\",\r\n        userBubbleColor: \"#fff\",\r\n        userFontColor: \"#4a4a4a\",\r\n      }}\r\n    >\r\n      <ChatBot\r\n        steps={[\r\n          {\r\n            id: 'welcome',\r\n            message: '안녕하세요~ 코핀 챗봇이에요 궁금한 사항을 물어봐주세요',\r\n            trigger: 'submit',\r\n          },\r\n          { \r\n            id: \"submit\", \r\n            options: [ \r\n              { value: \"y\", label: \"백신 접종 자가 체크리스트\", trigger: \"bot-response\" }, \r\n              { value: \"n\", label: \"질문하기\", trigger: \"userinput\" }, \r\n            ], \r\n          }, \r\n          {\r\n            id: 'userinput',\r\n            user: true,\r\n            trigger: 'bot-response'\r\n          },\r\n          // {\r\n          //   id: 'bot-response',\r\n          //   message: '질문 내용이 {previousValue}(이)가 맞습니까?',\r\n          //   trigger: 'user-input'\r\n          // },\r\n          \r\n          {\r\n            id: \"bot-response\",\r\n            component: <Post />,\r\n            asMessage: true,\r\n            trigger: 'userinput'\r\n          },\r\n          \r\n        ]}\r\n        botAvatar={require(\"./data/icon.png\").default}\r\n        userAvatar={require(\"./data/user.png\").default}\r\n      />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport function Post(props){\r\n  const dispatch = useDispatch()\r\n  const [ text, setText] = useState()\r\n  // console.log(props.steps.submit.value)\r\n  if (props.steps.userinput == null){\r\n    console.log(props.steps.submit.value)\r\n  }else{\r\n    console.log(props.steps.userinput.value)\r\n  }\r\n  // useEffect(()=>{\r\n  //   setText(props.steps.userinput.value)\r\n  //   // dispatch(answer(props.steps.userinput.value))\r\n  // },[text])\r\n    return (\r\n      <>\r\n      {/* <div>{text}이(가) 라고 질문하신 것이 맞습니까?</div> */}\r\n      <div>이(가) 라고 질문하신 것이 맞습니까?</div>\r\n      </>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}