{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bitcamp\\\\ai-work\\\\cofin-msa-organ\\\\frontend\\\\src\\\\features\\\\map\\\\components\\\\Geolocation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { LocalMap } from \"..\";\nimport { casesPoints, medPoints } from \"../reducer/mapSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Geolocation = type => {\n  _s();\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (navigator.geolocation) {\n      // GPS를 지원하면\n      navigator.geolocation.getCurrentPosition(function (position) {\n        //   alert(position.coords.latitude + ' ' + position.coords.longitude);\n        if (type == 'med') {\n          dispatch(medPoints({\n            'latitude': position.coords.latitude,\n            'longitude': position.coords.longitude\n          }));\n          alert(type);\n        } else dispatch(casesPoints({\n          'latitude': position.coords.latitude,\n          'longitude': position.coords.longitude\n        }));\n\n        window.localStorage.setItem('sessionGeo', [position.coords.latitude, position.coords.longitude]);\n      }, function (error) {\n        console.error(error);\n      }, {\n        enableHighAccuracy: false,\n        maximumAge: 0,\n        timeout: Infinity\n      });\n    } else {\n      alert('GPS를 지원하지 않습니다');\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(LocalMap, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 14\n    }, this)\n  }, void 0, false);\n};\n\n_s(Geolocation, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Geolocation;\nexport default Geolocation;\n\nvar _c;\n\n$RefreshReg$(_c, \"Geolocation\");","map":{"version":3,"sources":["C:/Users/bitcamp/ai-work/cofin-msa-organ/frontend/src/features/map/components/Geolocation.js"],"names":["React","useEffect","useDispatch","LocalMap","casesPoints","medPoints","Geolocation","type","dispatch","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","alert","window","localStorage","setItem","error","console","enableHighAccuracy","maximumAge","timeout","Infinity"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,IAAzB;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,qBAAvC;;;;AAEA,MAAMC,WAAW,GAAIC,IAAD,IAAU;AAAA;;AAC5B,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACED,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIQ,SAAS,CAACC,WAAd,EAA2B;AAAE;AACzBD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAASC,QAAT,EAAmB;AAC5D;AACA,YAAIL,IAAI,IAAI,KAAZ,EAAkB;AAChBC,UAAAA,QAAQ,CAACH,SAAS,CAAC;AAAC,wBAAYO,QAAQ,CAACC,MAAT,CAAgBC,QAA7B;AAAuC,yBAAaF,QAAQ,CAACC,MAAT,CAAgBE;AAApE,WAAD,CAAV,CAAR;AACAC,UAAAA,KAAK,CAACT,IAAD,CAAL;AAAY,SAFd,MAGKC,QAAQ,CAACJ,WAAW,CAAC;AAAC,sBAAYQ,QAAQ,CAACC,MAAT,CAAgBC,QAA7B;AAAuC,uBAAaF,QAAQ,CAACC,MAAT,CAAgBE;AAApE,SAAD,CAAZ,CAAR;;AACLE,QAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,YAA5B,EAA0C,CAACP,QAAQ,CAACC,MAAT,CAAgBC,QAAjB,EAA2BF,QAAQ,CAACC,MAAT,CAAgBE,SAA3C,CAA1C;AACC,OAPD,EAOG,UAASK,KAAT,EAAgB;AACjBC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,OATD,EASG;AACDE,QAAAA,kBAAkB,EAAE,KADnB;AAEDC,QAAAA,UAAU,EAAE,CAFX;AAGDC,QAAAA,OAAO,EAAEC;AAHR,OATH;AAcD,KAfH,MAeS;AACLT,MAAAA,KAAK,CAAC,gBAAD,CAAL;AACD;AACN,GAnBQ,EAmBP,EAnBO,CAAT;AAoBA,sBAAO;AAAA,2BAAE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAF,mBAAP;AACH,CAvBD;;GAAMV,W;UACaJ,W;;;KADbI,W;AAyBN,eAAeA,WAAf","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { LocalMap } from \"..\";\r\nimport { casesPoints, medPoints } from \"../reducer/mapSlice\";\r\n\r\nconst Geolocation = (type) => {\r\n  const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (navigator.geolocation) { // GPS를 지원하면\r\n            navigator.geolocation.getCurrentPosition(function(position) {\r\n            //   alert(position.coords.latitude + ' ' + position.coords.longitude);\r\n            if (type == 'med'){\r\n              dispatch(medPoints({'latitude': position.coords.latitude, 'longitude': position.coords.longitude}))\r\n              alert(type)}\r\n            else dispatch(casesPoints({'latitude': position.coords.latitude, 'longitude': position.coords.longitude}))\r\n            window.localStorage.setItem('sessionGeo', [position.coords.latitude, position.coords.longitude])\r\n            }, function(error) {\r\n              console.error(error);\r\n            }, {\r\n              enableHighAccuracy: false,\r\n              maximumAge: 0,\r\n              timeout: Infinity\r\n            });\r\n          } else {\r\n            alert('GPS를 지원하지 않습니다');\r\n          }\r\n    },[])\r\n    return(<><LocalMap/></>)\r\n}\r\n\r\nexport default Geolocation"]},"metadata":{},"sourceType":"module"}