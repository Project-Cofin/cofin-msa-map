{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { chatbot, chatbotAPI } from \"..\";\n\nconst ANSWER = async x => {\n  const res = await chatbotAPI.findAnswer(x);\n  return res.data;\n}; // const EXIST = async (x) => {\n//   const res = await userAPI.exist(x)\n//   return res.data\n// }\n// const userDetailPage = async (x) => {\n//   const res = await userAPI.userDetail(x)\n//   return res.data\n// }\n\n\n_c = ANSWER;\nexport const answer = createAsyncThunk('users/join', ANSWER); // export const exist = createAsyncThunk('users/exist', EXIST)\n// export const detailPage = createAsyncThunk('users/dtail', userDetailPage)\n// export const listPage = createAsyncThunk('users/list', userListPage)\n// export const loginPage = createAsyncThunk('users/login', userLoginPage)\n\nconst chatbotSlice = createSlice({\n  name: 'bot',\n  initialState: {\n    botState: {\n      answer: ''\n    },\n    botsState: [],\n    type: '',\n    keyword: '',\n    params: {}\n  },\n  reducers: {},\n  extraReducers: {\n    [answer.fulfilled]: (state, action) => {\n      state.userState = action.payload;\n    } // [exist.fulfilled]: ( state, action ) => { \n    //   if(action.payload){window.location.href='/add'}\n    //   else{ alert(`사용가능함`) }\n    // },\n    // [detailPage.fulfilled]: ( state, {meta, payload} ) => { state.userState = payload },\n    // [listPage.fulfilled]: ( state, {meta, payload} ) => { state.usersState = payload },\n    // [loginPage.fulfilled]: ( state, {meta, payload} ) => {\n    //   state.userState = payload\n    //   window.localStorage.setItem('sessionUser', JSON.stringify(payload))\n    //   if(payload.username != null){\n    //     alert(`${payload.name}님 환영합니다`)\n    //     window.location.href = `/detail`\n    //   }else{\n    //     alert('아이디, 비번 오류로 로그인 실패  ')\n    //     changeNull(['username','password'])\n    //   }\n    // },\n\n  }\n});\nexport const currentBotState = state => state.bot.botState;\nexport const currentBotsState = state => state.bot.botsState; // export const currentUserParam = state => state.users.param\n\nexport default chatbotSlice.reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ANSWER\");","map":{"version":3,"sources":["C:/Users/bitcamp/ai-work/cofin-msa-organ/frontend/src/features/chatbot/reducer/chatbotSlice.js"],"names":["createAsyncThunk","createSlice","chatbot","chatbotAPI","ANSWER","x","res","findAnswer","data","answer","chatbotSlice","name","initialState","botState","botsState","type","keyword","params","reducers","extraReducers","fulfilled","state","action","userState","payload","currentBotState","bot","currentBotsState","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,IAApC;;AAEA,MAAMC,MAAM,GAAG,MAAOC,CAAP,IAAa;AACzB,QAAMC,GAAG,GAAG,MAAMH,UAAU,CAACI,UAAX,CAAsBF,CAAtB,CAAlB;AACA,SAAOC,GAAG,CAACE,IAAX;AACF,CAHD,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAXMJ,M;AAcN,OAAO,MAAMK,MAAM,GAAGT,gBAAgB,CAAC,YAAD,EAAeI,MAAf,CAA/B,C,CACP;AACA;AACA;AACA;;AAEA,MAAMM,YAAY,GAAGT,WAAW,CAAC;AAC/BU,EAAAA,IAAI,EAAE,KADyB;AAE/BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE;AACNJ,MAAAA,MAAM,EAAE;AADF,KADE;AAIZK,IAAAA,SAAS,EAAE,EAJC;AAKZC,IAAAA,IAAI,EAAE,EALM;AAMZC,IAAAA,OAAO,EAAE,EANG;AAOZC,IAAAA,MAAM,EAAE;AAPI,GAFiB;AAW/BC,EAAAA,QAAQ,EAAE,EAXqB;AAY/BC,EAAAA,aAAa,EAAE;AACb,KAACV,MAAM,CAACW,SAAR,GAAoB,CAAEC,KAAF,EAASC,MAAT,KAAqB;AACvCD,MAAAA,KAAK,CAACE,SAAN,GAAkBD,MAAM,CAACE,OAAzB;AACD,KAHY,CAIb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AApBa;AAZgB,CAAD,CAAhC;AAoCA,OAAO,MAAMC,eAAe,GAAGJ,KAAK,IAAIA,KAAK,CAACK,GAAN,CAAUb,QAA3C;AACP,OAAO,MAAMc,gBAAgB,GAAGN,KAAK,IAAIA,KAAK,CAACK,GAAN,CAAUZ,SAA5C,C,CACP;;AACA,eAAeJ,YAAY,CAACkB,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { chatbot, chatbotAPI } from \"..\";\r\n\r\nconst ANSWER = async (x) => {\r\n   const res = await chatbotAPI.findAnswer(x)\r\n   return res.data\r\n}\r\n// const EXIST = async (x) => {\r\n//   const res = await userAPI.exist(x)\r\n//   return res.data\r\n// }\r\n// const userDetailPage = async (x) => {\r\n//   const res = await userAPI.userDetail(x)\r\n//   return res.data\r\n// }\r\n\r\n\r\nexport const answer = createAsyncThunk('users/join', ANSWER)\r\n// export const exist = createAsyncThunk('users/exist', EXIST)\r\n// export const detailPage = createAsyncThunk('users/dtail', userDetailPage)\r\n// export const listPage = createAsyncThunk('users/list', userListPage)\r\n// export const loginPage = createAsyncThunk('users/login', userLoginPage)\r\n\r\nconst chatbotSlice = createSlice({\r\n  name: 'bot',\r\n  initialState: {\r\n    botState: {\r\n        answer: ''\r\n    },\r\n    botsState: [],\r\n    type: '',\r\n    keyword: '',\r\n    params: {}\r\n  },\r\n  reducers: {},\r\n  extraReducers: {\r\n    [answer.fulfilled]: ( state, action ) => { \r\n      state.userState = action.payload \r\n    },\r\n    // [exist.fulfilled]: ( state, action ) => { \r\n    //   if(action.payload){window.location.href='/add'}\r\n    //   else{ alert(`사용가능함`) }\r\n    // },\r\n    // [detailPage.fulfilled]: ( state, {meta, payload} ) => { state.userState = payload },\r\n    // [listPage.fulfilled]: ( state, {meta, payload} ) => { state.usersState = payload },\r\n    // [loginPage.fulfilled]: ( state, {meta, payload} ) => {\r\n    //   state.userState = payload\r\n    //   window.localStorage.setItem('sessionUser', JSON.stringify(payload))\r\n    //   if(payload.username != null){\r\n    //     alert(`${payload.name}님 환영합니다`)\r\n    //     window.location.href = `/detail`\r\n    //   }else{\r\n    //     alert('아이디, 비번 오류로 로그인 실패  ')\r\n    //     changeNull(['username','password'])\r\n    //   }\r\n    // },\r\n  }\r\n\r\n})\r\nexport const currentBotState = state => state.bot.botState\r\nexport const currentBotsState = state => state.bot.botsState\r\n// export const currentUserParam = state => state.users.param\r\nexport default chatbotSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}