{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { mapAPI } from 'features/map';\n\nconst WORLD = async () => {\n  const res = await mapAPI.world();\n  return res.data;\n};\n\n_c = WORLD;\n\nconst MEDPOINT = async x => {\n  const res = await mapAPI.medPoint(x);\n  return res.data;\n};\n\n_c2 = MEDPOINT;\n\nconst MEDPOINTS = async x => {\n  const res = await mapAPI.medPoints(x);\n  return res.data;\n};\n\n_c3 = MEDPOINTS;\n\nconst CASES = async x => {\n  const res = await mapAPI.cases(x);\n  return res.data;\n};\n\n_c4 = CASES;\nexport const worldMap = createAsyncThunk('/organ/world', WORLD);\nexport const medPoint = createAsyncThunk('/organ/med-point', MEDPOINT);\nexport const medPoints = createAsyncThunk('/organ/med-points', MEDPOINTS);\nexport const casesPoints = createAsyncThunk('/organ/cases', CASES);\nexport const testGeo = payload => {\n  if (navigator.geolocation) {\n    // GPS를 지원하면\n    navigator.geolocation.getCurrentPosition(function (position) {\n      //   alert(position.coords.latitude + ' ' + position.coords.longitude);\n      if (payload == 'med') {\n        medPoints({\n          'latitude': position.coords.latitude,\n          'longitude': position.coords.longitude\n        });\n      } else {\n        casesPoints({\n          'latitude': position.coords.latitude,\n          'longitude': position.coords.longitude\n        });\n      }\n\n      window.localStorage.setItem('sessionGeo', [position.coords.latitude, position.coords.longitude]);\n    }, function (error) {\n      console.error(error);\n    }, {\n      enableHighAccuracy: false,\n      maximumAge: 0,\n      timeout: Infinity\n    });\n  } else {\n    alert('GPS를 지원하지 않습니다');\n  }\n};\nconst mapSlice = createSlice({\n  name: 'maps',\n  initialState: {\n    mapState: {\n      id: '',\n      type: '',\n      name: '',\n      meta: '',\n      latitude: '',\n      longitude: '',\n      population: '',\n      cases: '',\n      medPointId: ''\n    },\n    mapsState: [],\n    type: '',\n    keyword: '',\n    params: {}\n  },\n  reducers: {},\n  extraReducers: {\n    [worldMap.fulfilled]: (state, action) => {\n      state.mapsState = action.payload; //   window.location.href = `/login`\n    },\n    [medPoint.fulfilled]: (state, action) => {\n      state.mapState = action.payload;\n    },\n    [medPoints.fulfilled]: (state, action) => {\n      state.mapsState = action.payload;\n    },\n    [casesPoints.fulfilled]: (state, action) => {\n      state.mapsState = action.payload;\n    }\n  }\n});\nexport const currentMapState = state => state.maps.mapState;\nexport const currentMapsState = state => state.maps.mapsState;\nexport default mapSlice.reducer;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"WORLD\");\n$RefreshReg$(_c2, \"MEDPOINT\");\n$RefreshReg$(_c3, \"MEDPOINTS\");\n$RefreshReg$(_c4, \"CASES\");","map":{"version":3,"sources":["C:/Users/bitcamp/ai-work/cofin-msa-organ/frontend/src/features/map/reducer/mapSlice.js"],"names":["createAsyncThunk","createSlice","mapAPI","WORLD","res","world","data","MEDPOINT","x","medPoint","MEDPOINTS","medPoints","CASES","cases","worldMap","casesPoints","testGeo","payload","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","window","localStorage","setItem","error","console","enableHighAccuracy","maximumAge","timeout","Infinity","alert","mapSlice","name","initialState","mapState","id","type","meta","population","medPointId","mapsState","keyword","params","reducers","extraReducers","fulfilled","state","action","currentMapState","maps","currentMapsState","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { mapAPI } from 'features/map';\r\n\r\nconst WORLD = async () => {\r\n   const res = await mapAPI.world()\r\n   return res.data\r\n}\r\nconst MEDPOINT = async (x) => {\r\n    const res = await mapAPI.medPoint(x)\r\n    return res.data\r\n }\r\nconst MEDPOINTS = async (x) => {\r\n    const res = await mapAPI.medPoints(x)\r\n    return res.data\r\n }\r\nconst CASES = async (x) => {\r\n    const res = await mapAPI.cases(x)\r\n    return res.data\r\n}\r\n\r\nexport const worldMap = createAsyncThunk('/organ/world', WORLD)\r\nexport const medPoint = createAsyncThunk('/organ/med-point', MEDPOINT)\r\nexport const medPoints = createAsyncThunk('/organ/med-points', MEDPOINTS)\r\nexport const casesPoints = createAsyncThunk('/organ/cases', CASES)\r\nexport const testGeo = (payload) =>{\r\n  if (navigator.geolocation) { // GPS를 지원하면\r\n    navigator.geolocation.getCurrentPosition(function(position) {\r\n    //   alert(position.coords.latitude + ' ' + position.coords.longitude);\r\n    if (payload == 'med'){\r\n      medPoints({'latitude': position.coords.latitude, 'longitude': position.coords.longitude})\r\n    }else{\r\n      casesPoints({'latitude': position.coords.latitude, 'longitude': position.coords.longitude})\r\n    }\r\n    window.localStorage.setItem('sessionGeo', [position.coords.latitude, position.coords.longitude])\r\n    }, function(error) {\r\n      console.error(error);\r\n    }, {\r\n      enableHighAccuracy: false,\r\n      maximumAge: 0,\r\n      timeout: Infinity\r\n    });\r\n  } else {\r\n    alert('GPS를 지원하지 않습니다');\r\n  }\r\n}\r\n\r\nconst mapSlice = createSlice({\r\n  name: 'maps',\r\n  initialState: {\r\n    mapState: {\r\n      id:'', type:'', name:'', meta:'', latitude: '', longitude: '', population: '', cases: '', medPointId: ''\r\n    },\r\n    mapsState: [],\r\n    type: '',\r\n    keyword: '',\r\n    params: {}\r\n  },\r\n  reducers: {},\r\n  extraReducers: {\r\n    [worldMap.fulfilled]: ( state, action ) => { \r\n      state.mapsState = action.payload \r\n    //   window.location.href = `/login`\r\n    },\r\n    [medPoint.fulfilled]: ( state, action ) => { \r\n        state.mapState = action.payload \r\n    },\r\n    [medPoints.fulfilled]: ( state, action ) => { \r\n        state.mapsState = action.payload \r\n    },\r\n    [casesPoints.fulfilled]: ( state, action ) => { \r\n        state.mapsState = action.payload \r\n    },\r\n  }\r\n\r\n})\r\nexport const currentMapState = state => state.maps.mapState\r\nexport const currentMapsState = state => state.maps.mapsState\r\nexport default mapSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}