{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WorldMap = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst React = require(\"react\");\n\nconst d3_geo_1 = require(\"d3-geo\");\n\nconst countries_geo_1 = require(\"./countries.geo\");\n\nconst constants_1 = require(\"./constants\");\n\nconst utils_1 = require(\"./utils\");\n\nconst draw_1 = require(\"./draw\");\n\nconst Frame_1 = require(\"./components/Frame\");\n\nconst Region_1 = require(\"./components/Region\");\n\nconst TextLabel_1 = require(\"./components/TextLabel\");\n\n(0, tslib_1.__exportStar)(require(\"./types\"), exports);\n\nfunction WorldMap(props) {\n  const {\n    data,\n    title,\n    valuePrefix = '',\n    valueSuffix = '',\n    color = constants_1.defaultColor,\n    strokeOpacity = 0.2,\n    backgroundColor = 'white',\n    tooltipBgColor = 'black',\n    tooltipTextColor = 'white',\n    size = constants_1.defaultSize,\n    frame = false,\n    frameColor = 'black',\n    borderColor = 'black',\n    richInteraction = false,\n    styleFunction = (0, constants_1.defaultCountryStyle)(borderColor, strokeOpacity),\n    tooltipTextFunction = constants_1.defaultTooltip,\n    onClickFunction,\n    hrefFunction,\n    textLabelFunction = () => []\n  } = props;\n  const windowWidth = (0, utils_1.useWindowWidth)();\n  const width = typeof size === 'number' ? size : (0, utils_1.responsify)(size, windowWidth);\n  const height = width * constants_1.heightRatio;\n  const [scale, setScale] = React.useState(1);\n  const [translateX, setTranslateX] = React.useState(0);\n  const [translateY, setTranslateY] = React.useState(0);\n  const containerRef = React.createRef();\n  const countryValueMap = Object.fromEntries(data.map(({\n    country,\n    value\n  }) => [country.toUpperCase(), value]));\n  const minValue = Math.min(...data.map(({\n    value\n  }) => value));\n  const maxValue = Math.max(...data.map(({\n    value\n  }) => value));\n  const projection = (0, d3_geo_1.geoMercator)();\n  const pathGenerator = (0, d3_geo_1.geoPath)().projection(projection);\n  const regions = countries_geo_1.default.features.map((feature, idx) => {\n    const triggerRef = React.createRef();\n    const {\n      I: isoCode,\n      N: countryName,\n      C: coordinates\n    } = feature;\n    const geoFeature = {\n      type: 'Feature',\n      properties: {\n        NAME: countryName,\n        ISO_A2: isoCode\n      },\n      geometry: {\n        type: 'MultiPolygon',\n        coordinates: coordinates\n      }\n    };\n    const context = {\n      countryCode: isoCode,\n      countryValue: countryValueMap[isoCode],\n      countryName,\n      color,\n      minValue,\n      maxValue,\n      prefix: valuePrefix,\n      suffix: valueSuffix\n    };\n    const path = React.createElement(Region_1.default, {\n      ref: triggerRef,\n      d: pathGenerator(geoFeature),\n      style: styleFunction(context),\n      onClick: event => onClickFunction === null || onClickFunction === void 0 ? void 0 : onClickFunction(Object.assign(Object.assign({}, context), {\n        event\n      })),\n      strokeOpacity: strokeOpacity,\n      href: hrefFunction === null || hrefFunction === void 0 ? void 0 : hrefFunction(context),\n      key: `path${idx}`\n    });\n    const tooltip = (0, draw_1.drawTooltip)(typeof context.countryValue === 'undefined' ? undefined : tooltipTextFunction(context), tooltipBgColor, tooltipTextColor, idx, triggerRef, containerRef);\n    return {\n      path,\n      highlightedTooltip: tooltip\n    };\n  });\n  const regionPaths = regions.map(entry => entry.path);\n  const regionTooltips = regions.map(entry => entry.highlightedTooltip);\n  const eventHandlers = {\n    onMouseDown(e) {\n      e.preventDefault();\n      e.stopPropagation();\n    },\n\n    onDoubleClick(e) {\n      const rect = e.currentTarget.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n\n      if (scale === 4) {\n        setTranslateX(0);\n        setTranslateY(0);\n        setScale(1);\n      } else {\n        setTranslateX(2 * translateX - x);\n        setTranslateY(2 * translateY - y);\n        setScale(scale * 2);\n      }\n    }\n\n  };\n  return React.createElement(\"figure\", {\n    className: \"worldmap__figure-container\",\n    style: {\n      backgroundColor\n    }\n  }, title && React.createElement(\"figcaption\", {\n    className: \"worldmap__figure-caption\"\n  }, title), React.createElement(\"svg\", Object.assign({\n    ref: containerRef,\n    height: `${height}px`,\n    width: `${width}px`\n  }, richInteraction ? eventHandlers : undefined), frame && React.createElement(Frame_1.default, {\n    color: frameColor\n  }), React.createElement(\"g\", {\n    transform: `translate(${translateX}, ${translateY}) scale(${width / 960 * scale}) translate(0, 240)`,\n    style: {\n      transition: 'all 0.2s'\n    }\n  }, regionPaths), React.createElement(\"g\", null, textLabelFunction(width).map((props, idx) => React.createElement(TextLabel_1.default, Object.assign({}, props, {\n    key: `text_${idx}`\n  })))), regionTooltips));\n}\n\nexports.default = WorldMap;\nexports.WorldMap = WorldMap;","map":{"version":3,"sources":["C:/Users/ASUS/ho/TeamProject/organ/frontend/node_modules/react-svg-worldmap/dist/index.js"],"names":["Object","defineProperty","exports","value","WorldMap","tslib_1","require","React","d3_geo_1","countries_geo_1","constants_1","utils_1","draw_1","Frame_1","Region_1","TextLabel_1","__exportStar","props","data","title","valuePrefix","valueSuffix","color","defaultColor","strokeOpacity","backgroundColor","tooltipBgColor","tooltipTextColor","size","defaultSize","frame","frameColor","borderColor","richInteraction","styleFunction","defaultCountryStyle","tooltipTextFunction","defaultTooltip","onClickFunction","hrefFunction","textLabelFunction","windowWidth","useWindowWidth","width","responsify","height","heightRatio","scale","setScale","useState","translateX","setTranslateX","translateY","setTranslateY","containerRef","createRef","countryValueMap","fromEntries","map","country","toUpperCase","minValue","Math","min","maxValue","max","projection","geoMercator","pathGenerator","geoPath","regions","default","features","feature","idx","triggerRef","I","isoCode","N","countryName","C","coordinates","geoFeature","type","properties","NAME","ISO_A2","geometry","context","countryCode","countryValue","prefix","suffix","path","createElement","ref","d","style","onClick","event","assign","href","key","tooltip","drawTooltip","undefined","highlightedTooltip","regionPaths","entry","regionTooltips","eventHandlers","onMouseDown","e","preventDefault","stopPropagation","onDoubleClick","rect","currentTarget","getBoundingClientRect","x","clientX","left","y","clientY","top","className","transform","transition"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WorldMap = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = require(\"react\");\nconst d3_geo_1 = require(\"d3-geo\");\nconst countries_geo_1 = require(\"./countries.geo\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\nconst draw_1 = require(\"./draw\");\nconst Frame_1 = require(\"./components/Frame\");\nconst Region_1 = require(\"./components/Region\");\nconst TextLabel_1 = require(\"./components/TextLabel\");\n(0, tslib_1.__exportStar)(require(\"./types\"), exports);\nfunction WorldMap(props) {\n    const { data, title, valuePrefix = '', valueSuffix = '', color = constants_1.defaultColor, strokeOpacity = 0.2, backgroundColor = 'white', tooltipBgColor = 'black', tooltipTextColor = 'white', size = constants_1.defaultSize, frame = false, frameColor = 'black', borderColor = 'black', richInteraction = false, styleFunction = (0, constants_1.defaultCountryStyle)(borderColor, strokeOpacity), tooltipTextFunction = constants_1.defaultTooltip, onClickFunction, hrefFunction, textLabelFunction = () => [], } = props;\n    const windowWidth = (0, utils_1.useWindowWidth)();\n    const width = typeof size === 'number' ? size : (0, utils_1.responsify)(size, windowWidth);\n    const height = width * constants_1.heightRatio;\n    const [scale, setScale] = React.useState(1);\n    const [translateX, setTranslateX] = React.useState(0);\n    const [translateY, setTranslateY] = React.useState(0);\n    const containerRef = React.createRef();\n    const countryValueMap = Object.fromEntries(data.map(({ country, value }) => [country.toUpperCase(), value]));\n    const minValue = Math.min(...data.map(({ value }) => value));\n    const maxValue = Math.max(...data.map(({ value }) => value));\n    const projection = (0, d3_geo_1.geoMercator)();\n    const pathGenerator = (0, d3_geo_1.geoPath)().projection(projection);\n    const regions = countries_geo_1.default.features.map((feature, idx) => {\n        const triggerRef = React.createRef();\n        const { I: isoCode, N: countryName, C: coordinates } = feature;\n        const geoFeature = {\n            type: 'Feature',\n            properties: { NAME: countryName, ISO_A2: isoCode },\n            geometry: {\n                type: 'MultiPolygon',\n                coordinates: coordinates,\n            },\n        };\n        const context = {\n            countryCode: isoCode,\n            countryValue: countryValueMap[isoCode],\n            countryName,\n            color,\n            minValue,\n            maxValue,\n            prefix: valuePrefix,\n            suffix: valueSuffix,\n        };\n        const path = (React.createElement(Region_1.default, { ref: triggerRef, d: pathGenerator(geoFeature), style: styleFunction(context), onClick: (event) => onClickFunction === null || onClickFunction === void 0 ? void 0 : onClickFunction(Object.assign(Object.assign({}, context), { event })), strokeOpacity: strokeOpacity, href: hrefFunction === null || hrefFunction === void 0 ? void 0 : hrefFunction(context), key: `path${idx}` }));\n        const tooltip = (0, draw_1.drawTooltip)(typeof context.countryValue === 'undefined'\n            ? undefined\n            : tooltipTextFunction(context), tooltipBgColor, tooltipTextColor, idx, triggerRef, containerRef);\n        return { path, highlightedTooltip: tooltip };\n    });\n    const regionPaths = regions.map((entry) => entry.path);\n    const regionTooltips = regions.map((entry) => entry.highlightedTooltip);\n    const eventHandlers = {\n        onMouseDown(e) {\n            e.preventDefault();\n            e.stopPropagation();\n        },\n        onDoubleClick(e) {\n            const rect = e.currentTarget.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const y = e.clientY - rect.top;\n            if (scale === 4) {\n                setTranslateX(0);\n                setTranslateY(0);\n                setScale(1);\n            }\n            else {\n                setTranslateX(2 * translateX - x);\n                setTranslateY(2 * translateY - y);\n                setScale(scale * 2);\n            }\n        },\n    };\n    return (React.createElement(\"figure\", { className: \"worldmap__figure-container\", style: { backgroundColor } },\n        title && (React.createElement(\"figcaption\", { className: \"worldmap__figure-caption\" }, title)),\n        React.createElement(\"svg\", Object.assign({ ref: containerRef, height: `${height}px`, width: `${width}px` }, (richInteraction ? eventHandlers : undefined)),\n            frame && React.createElement(Frame_1.default, { color: frameColor }),\n            React.createElement(\"g\", { transform: `translate(${translateX}, ${translateY}) scale(${(width / 960) * scale}) translate(0, 240)`, style: { transition: 'all 0.2s' } }, regionPaths),\n            React.createElement(\"g\", null, textLabelFunction(width).map((props, idx) => (React.createElement(TextLabel_1.default, Object.assign({}, props, { key: `text_${idx}` }))))),\n            regionTooltips)));\n}\nexports.default = WorldMap;\nexports.WorldMap = WorldMap;\n"]},"metadata":{},"sourceType":"script"}