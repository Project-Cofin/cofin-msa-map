{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bitcamp\\\\ai-work\\\\cofin-msa-organ\\\\frontend\\\\src\\\\features\\\\map\\\\components\\\\LocalMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { medPoints, casesPoints } from \"../reducer/mapSlice\";\nimport styled from \"styled-components\";\nimport { map } from \"..\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\n\nfunction LocalMap() {\n  _s();\n\n  const med_points = useSelector(state => state.map.mapsState);\n  const dispatch = useDispatch();\n  var geoInfo = window.localStorage.getItem('sessionGeo').split(',');\n  const bounds = useMemo(() => {\n    const bounds = new kakao.maps.LatLngBounds();\n    med_points.map(point => {\n      bounds.extend(new kakao.maps.LatLng(point.lat, point.lng));\n    });\n    return bounds;\n  }, [medPoints]);\n  useEffect(() => {\n    const geoInfo = window.localStorage.getItem('sessionGeo').split(','); // alert(geoInfo)\n    // console.log(med_points)\n\n    const mapContainer = document.getElementById('map'),\n          // 지도를 표시할 div  \n    mapOption = {\n      // center: new kakao.maps.LatLng(33.450701, 126.570667), // 지도의 중심좌표\n      center: new kakao.maps.LatLng(geoInfo[0], geoInfo[1]),\n      // 지도의 중심좌표\n      level: 5 // 지도의 확대 레벨\n\n    };\n    const map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다\n\n    let positions = med_points.map(x => {\n      return {\n        content: `<div style=\"padding:0 3em; border-radius: 15px;\">${x.name}</div>`,\n        latlng: new kakao.maps.LatLng(x.latitude, x.longitude)\n      };\n    });\n    positions = [...positions, {\n      content: `<div style=\"padding:0 3em; border-radius: 15px;\">내 위치</div>`,\n      latlng: new kakao.maps.LatLng(geoInfo[0], geoInfo[1])\n    }]; // console.log(positions)\n\n    for (let i = 0; i < positions.length; i++) {\n      // 마커를 생성합니다\n      const marker = new kakao.maps.Marker({\n        map: map,\n        // 마커를 표시할 지도\n        position: positions[i].latlng // 마커의 위치\n\n      }); // 마커에 표시할 인포윈도우를 생성합니다 \n\n      const infowindow = new kakao.maps.InfoWindow({\n        content: positions[i].content // 인포윈도우에 표시할 내용\n\n      }); // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다\n      // 이벤트 리스너로는 클로저를 만들어 등록합니다 \n      // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다\n\n      kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));\n      kakao.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));\n      kakao.maps.event.addListener(marker, 'click', function () {\n        alert('hi!');\n      });\n    } // 인포윈도우를 표시하는 클로저를 만드는 함수입니다 \n\n\n    function makeOverListener(map, marker, infowindow) {\n      return function () {\n        infowindow.open(map, marker);\n      };\n    } // 인포윈도우를 닫는 클로저를 만드는 함수입니다 \n\n\n    function makeOutListener(infowindow) {\n      return function () {\n        infowindow.close();\n      };\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(OptionUl, {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\uD45C\\uC2DC \\uB300\\uC0C1 \\uC120\\uD0DD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"sel\",\n          onChange: () => {\n            if (map) map.setBouds(bounds);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"optgroup\", {\n            label: \"\\uD45C\\uC2DC \\uB300\\uC0C1 \\uC120\\uD0DD\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"medpoint\",\n              children: \"\\uC120\\uBCC4 \\uC9C4\\uB8CC\\uC18C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"cases\",\n              children: \"\\uD655\\uC9C4\\uC790 \\uBC1C\\uC0DD \\uC704\\uCE58\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Map // 지도를 표시할 Container\n    , {\n      center: {\n        // 지도의 중심좌표\n        lat: 33.450701,\n        lng: 126.570667\n      },\n      style: {\n        width: \"100%\",\n        height: \"450px\"\n      },\n      level: 3 // 지도의 확대 레벨\n      ,\n      onCreate: setMap,\n      children: points.map(point => /*#__PURE__*/_jsxDEV(MapMarker, {\n        position: point\n      }, `${point.lat}-${point.lng}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 32\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(LocalMap, \"CHAuiTPWL+Sg26iG88+RR88SVG8=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = LocalMap;\nexport default LocalMap;\nconst OptionUl = styled.ul`\n    list-style: none;\n`;\n_c2 = OptionUl;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LocalMap\");\n$RefreshReg$(_c2, \"OptionUl\");","map":{"version":3,"sources":["C:/Users/bitcamp/ai-work/cofin-msa-organ/frontend/src/features/map/components/LocalMap.js"],"names":["React","useEffect","useMemo","useDispatch","useSelector","medPoints","casesPoints","styled","map","kakao","window","LocalMap","med_points","state","mapsState","dispatch","geoInfo","localStorage","getItem","split","bounds","maps","LatLngBounds","point","extend","LatLng","lat","lng","mapContainer","document","getElementById","mapOption","center","level","Map","positions","x","content","name","latlng","latitude","longitude","i","length","marker","Marker","position","infowindow","InfoWindow","event","addListener","makeOverListener","makeOutListener","alert","open","close","setBouds","width","height","setMap","points","OptionUl","ul"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { medPoints, casesPoints } from \"../reducer/mapSlice\";\r\nimport styled from \"styled-components\";\r\nimport { map } from \"..\";\r\nconst { kakao } = window;\r\n\r\n\r\nfunction LocalMap() {\r\n    const med_points = useSelector(state => state.map.mapsState)\r\n    const dispatch = useDispatch()\r\n    var geoInfo = window.localStorage.getItem('sessionGeo').split(',')\r\n\r\n    const bounds = useMemo(() => {\r\n        const bounds = new kakao.maps.LatLngBounds();\r\n  \r\n        med_points.map(point => {\r\n          bounds.extend(new kakao.maps.LatLng(point.lat, point.lng))\r\n        });\r\n        return bounds;\r\n      }, [medPoints])\r\n  \r\n    \r\n    useEffect(() => {\r\n    const geoInfo = window.localStorage.getItem('sessionGeo').split(',')\r\n    // alert(geoInfo)\r\n    // console.log(med_points)\r\n    const mapContainer = document.getElementById('map'), // 지도를 표시할 div  \r\n    mapOption = { \r\n        // center: new kakao.maps.LatLng(33.450701, 126.570667), // 지도의 중심좌표\r\n        center: new kakao.maps.LatLng(geoInfo[0], geoInfo[1]), // 지도의 중심좌표\r\n        level: 5 // 지도의 확대 레벨\r\n    };\r\n\r\n    const map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다\r\n    let positions = med_points.map(x => {return {content: `<div style=\"padding:0 3em; border-radius: 15px;\">${x.name}</div>`, \r\n                                                 latlng: new kakao.maps.LatLng(x.latitude, x.longitude)}})\r\n    positions = [...positions, {content: `<div style=\"padding:0 3em; border-radius: 15px;\">내 위치</div>`, latlng: new kakao.maps.LatLng(geoInfo[0], geoInfo[1])}]\r\n    // console.log(positions)\r\n    for (let i = 0; i < positions.length; i ++) {\r\n        // 마커를 생성합니다\r\n        const marker = new kakao.maps.Marker({\r\n            map: map, // 마커를 표시할 지도\r\n            position: positions[i].latlng // 마커의 위치\r\n        });\r\n\r\n        // 마커에 표시할 인포윈도우를 생성합니다 \r\n        const infowindow = new kakao.maps.InfoWindow({\r\n            content: positions[i].content // 인포윈도우에 표시할 내용\r\n        });\r\n\r\n        // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다\r\n        // 이벤트 리스너로는 클로저를 만들어 등록합니다 \r\n        // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다\r\n        kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));\r\n        kakao.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));\r\n        kakao.maps.event.addListener(marker, 'click', function(){alert('hi!')})\r\n    }\r\n\r\n    // 인포윈도우를 표시하는 클로저를 만드는 함수입니다 \r\n    function makeOverListener(map, marker, infowindow) {\r\n        return function() {\r\n            infowindow.open(map, marker);\r\n        };\r\n    }\r\n\r\n    // 인포윈도우를 닫는 클로저를 만드는 함수입니다 \r\n    function makeOutListener(infowindow) {\r\n        return function() {\r\n            infowindow.close();\r\n        };\r\n    }\r\n  }, []);\r\n\r\n  return (<>\r\n  <OptionUl>\r\n        <li>\r\n            <label>표시 대상 선택</label><br/>\r\n            <select id=\"sel\" onChange={()=>{\r\n                if (map) map.setBouds(bounds)\r\n            }}>\r\n                <optgroup label=\"표시 대상 선택\">\r\n                  <option value=\"medpoint\">선별 진료소</option>  \r\n                  <option value=\"cases\">확진자 발생 위치</option>  \r\n                </optgroup>\r\n            </select>\r\n        </li>\r\n    </OptionUl>\r\n    <Map // 지도를 표시할 Container\r\n          center={{\r\n            // 지도의 중심좌표\r\n            lat: 33.450701,\r\n            lng: 126.570667,\r\n          }}\r\n          style={{\r\n            width: \"100%\",\r\n            height: \"450px\",\r\n          }}\r\n          level={3} // 지도의 확대 레벨\r\n          onCreate={setMap}\r\n        >\r\n          {points.map(point => <MapMarker key={`${point.lat}-${point.lng}`} position={point} />)}\r\n        </Map>\r\n    </>);\r\n}\r\n\r\nexport default LocalMap;\r\n\r\nconst OptionUl = styled.ul`\r\n    list-style: none;\r\n`"]},"metadata":{},"sourceType":"module"}