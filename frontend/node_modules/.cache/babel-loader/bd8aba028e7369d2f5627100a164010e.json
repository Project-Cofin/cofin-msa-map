{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bitcamp\\\\ai-work\\\\cofin-msa-organ\\\\frontend\\\\src\\\\features\\\\map\\\\components\\\\LocalMap.js\",\n    _s = $RefreshSig$();\n\nimport { Map, MapMarker } from 'react-kakao-maps-sdk';\nimport React, { useState, useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { casesPoints, medPoints } from \"../reducer/mapSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\n\nfunction LocalMap() {\n  _s();\n\n  const dispatch = useDispatch();\n  const geoInfo = window.localStorage.getItem('sessionGeo').split(',');\n  const [map, setMap] = useState();\n  const points = useSelector(state => state.map.mapsState.map(x => {\n    return {\n      title: x.name,\n      latlng: {\n        lat: x.latitude,\n        lng: x.longitude\n      }\n    };\n  }));\n  setPoints([...points, {\n    title: '현재 위치',\n    latlng: {\n      lat: geoInfo[0],\n      lng: geoInfo[1]\n    }\n  }]); // const [points, setPoints] = useState([\n  //   {lat: 33.452278, lng:126.567803},\n  //   {lat: 33.452671, lng:126.574792},\n  //   {lat: 33.451744, lng:126.572441},\n  // ])\n\n  const bounds = useMemo(() => {\n    const bounds = new kakao.maps.LatLngBounds();\n    points.forEach(point => {\n      bounds.extend(new kakao.maps.LatLng(point.latlng.lat, point.latlng.lng));\n    });\n    return bounds;\n  }, [points]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Map // 지도를 표시할 Container\n    , {\n      center: {\n        // 지도의 중심좌표\n        lat: geoInfo[0],\n        lng: geoInfo[1]\n      },\n      style: {\n        width: \"1000px\",\n        height: \"800px\"\n      },\n      level: 5 // 지도의 확대 레벨\n      ,\n      onCreate: setMap,\n      children: points.map((position, index) => /*#__PURE__*/_jsxDEV(MapMarker, {\n        position: position.latlng // 마커를 표시할 위치\n        ,\n        title: position.title // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\n\n      }, `${position.title}-${position.latlng}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(OptionUl, {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\uD45C\\uC2DC \\uB300\\uC0C1 \\uC120\\uD0DD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"sel\",\n          onChange: e => {\n            if (e.target.value == 'medpoint') {\n              dispatch(medPoints({\n                'latitude': geoInfo[0],\n                'longitude': geoInfo[1]\n              }));\n            } else {\n              dispatch(casesPoints({\n                'latitude': geoInfo[0],\n                'longitude': geoInfo[1]\n              }));\n            }\n\n            if (map) map.setBounds(bounds);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"optgroup\", {\n            label: \"\\uD45C\\uC2DC \\uB300\\uC0C1 \\uC120\\uD0DD\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"medpoint\",\n              children: \"\\uC120\\uBCC4 \\uC9C4\\uB8CC\\uC18C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"cases\",\n              children: \"\\uD655\\uC9C4\\uC790 \\uBC1C\\uC0DD \\uC704\\uCE58\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(LocalMap, \"hMvX/eUN44NCL59kNrLUN1+7FwU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = LocalMap;\nexport default LocalMap;\nconst OptionUl = styled.ul`\n    list-style: none;\n`;\n_c2 = OptionUl;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LocalMap\");\n$RefreshReg$(_c2, \"OptionUl\");","map":{"version":3,"sources":["C:/Users/bitcamp/ai-work/cofin-msa-organ/frontend/src/features/map/components/LocalMap.js"],"names":["Map","MapMarker","React","useState","useMemo","styled","useDispatch","useSelector","casesPoints","medPoints","kakao","window","LocalMap","dispatch","geoInfo","localStorage","getItem","split","map","setMap","points","state","mapsState","x","title","name","latlng","lat","latitude","lng","longitude","setPoints","bounds","maps","LatLngBounds","forEach","point","extend","LatLng","width","height","position","index","e","target","value","setBounds","OptionUl","ul"],"mappings":"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","sourcesContent":["import { Map, MapMarker } from 'react-kakao-maps-sdk';\r\nimport React, {useState, useMemo} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { casesPoints, medPoints } from \"../reducer/mapSlice\";\r\nconst { kakao } = window; \r\n\r\nfunction LocalMap() {\r\n    const dispatch = useDispatch()\r\n    const geoInfo = window.localStorage.getItem('sessionGeo').split(',')\r\n    const [map, setMap] = useState()\r\n    const points = useSelector(state => state.map.mapsState.map(\r\n        x => {return {title: x.name,\r\n                      latlng: {lat: x.latitude, lng:x.longitude}}}\r\n    )) \r\n    setPoints([...points, {title: '현재 위치', latlng: {lat: geoInfo[0], lng: geoInfo[1]}}])\r\n    // const [points, setPoints] = useState([\r\n    //   {lat: 33.452278, lng:126.567803},\r\n    //   {lat: 33.452671, lng:126.574792},\r\n    //   {lat: 33.451744, lng:126.572441},\r\n    // ])\r\n\r\n\r\n    const bounds = useMemo(() => {\r\n      const bounds = new kakao.maps.LatLngBounds();\r\n\r\n      points.forEach(point => {\r\n        bounds.extend(new kakao.maps.LatLng(point.latlng.lat, point.latlng.lng))\r\n      });\r\n      return bounds;\r\n    }, [points])\r\n\r\n    return(<>\r\n    <Map // 지도를 표시할 Container\r\n          center={{\r\n            // 지도의 중심좌표\r\n            lat: geoInfo[0],\r\n            lng: geoInfo[1],\r\n          }}\r\n          style={{\r\n            width: \"1000px\",\r\n            height: \"800px\",\r\n          }}\r\n          level={5} // 지도의 확대 레벨\r\n          onCreate={setMap}\r\n        >\r\n          {points.map((position, index) => (\r\n        <MapMarker\r\n          key={`${position.title}-${position.latlng}`}\r\n          position={position.latlng} // 마커를 표시할 위치\r\n          title={position.title} // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\r\n        />\r\n      ))}\r\n        </Map>\r\n        <OptionUl>\r\n        <li>\r\n            <label>표시 대상 선택</label><br/>\r\n            <select id=\"sel\" onChange={(e) => {\r\n            if (e.target.value == 'medpoint'){\r\n                dispatch(medPoints({'latitude': geoInfo[0], 'longitude': geoInfo[1]}))\r\n            }else{\r\n                dispatch(casesPoints({'latitude': geoInfo[0], 'longitude': geoInfo[1]}))\r\n            }\r\n            if (map) map.setBounds(bounds)\r\n          }}>\r\n                <optgroup label=\"표시 대상 선택\">\r\n                  <option value=\"medpoint\">선별 진료소</option>  \r\n                  <option value=\"cases\">확진자 발생 위치</option>  \r\n                </optgroup>\r\n            </select>\r\n        </li>\r\n    </OptionUl>\r\n    </>);\r\n}\r\n\r\nexport default LocalMap;\r\n\r\nconst OptionUl = styled.ul`\r\n    list-style: none;\r\n`\r\n"]},"metadata":{},"sourceType":"module"}