{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { chatbotAPI } from \"..\"; // const userJoinPage = async (x) => {\n//    const res = await userAPI.userJoin(x)\n//    return res.data\n// }\n// const EXIST = async (x) => {\n//   const res = await userAPI.exist(x)\n//   return res.data\n// }\n// const userDetailPage = async (x) => {\n//   const res = await userAPI.userDetail(x)\n//   return res.data\n// }\n// export const joinPage = createAsyncThunk('users/join', userJoinPage)\n// export const exist = createAsyncThunk('users/exist', EXIST)\n// export const detailPage = createAsyncThunk('users/dtail', userDetailPage)\n// export const listPage = createAsyncThunk('users/list', userListPage)\n// export const loginPage = createAsyncThunk('users/login', userLoginPage)\n\nconst chatbotSlice = createSlice({//   name: 'users',\n  //   initialState: {\n  //     userState: {\n  //       username:'', password:'', email:'', name:'', regDate: ''\n  //     },\n  //     usersState: [],\n  //     type: '',\n  //     keyword: '',\n  //     params: {}\n  //   },\n  //   reducers: {},\n  //   extraReducers: {\n  //     [joinPage.fulfilled]: ( state, action ) => { \n  //       state.userState = action.payload \n  //       window.location.href = `/login`\n  //     },\n  //     [exist.fulfilled]: ( state, action ) => { \n  //       if(action.payload){window.location.href='/add'}\n  //       else{ alert(`사용가능함`) }\n  //     },\n  //     [detailPage.fulfilled]: ( state, {meta, payload} ) => { state.userState = payload },\n  //     [listPage.fulfilled]: ( state, {meta, payload} ) => { state.usersState = payload },\n  //     [loginPage.fulfilled]: ( state, {meta, payload} ) => {\n  //       state.userState = payload\n  //       window.localStorage.setItem('sessionUser', JSON.stringify(payload))\n  //       if(payload.username != null){\n  //         alert(`${payload.name}님 환영합니다`)\n  //         window.location.href = `/detail`\n  //       }else{\n  //         alert('아이디, 비번 오류로 로그인 실패  ')\n  //         changeNull(['username','password'])\n  //       }\n  //     },\n  //     [modifyPage.fulfilled]: ( state, action ) => { \n  //       // state.userState = action.payload \n  //       alert(`회원 정보 수정 성공 ${action.data}`)\n  //       window.localStorage.setItem('sessionUser', JSON.stringify(action.payload))\n  //       window.location.href = `/detail`\n  //     },\n  //     [removePage.fulfilled]: ( state, {meta, payload }) => { \n  //       window.localStorage.removeItem('sessinUser')\n  //       window.localStorage.clear()\n  //       window.location.href = '/home'\n  //     }\n  //   }\n}); // export const currentUserState = state => state.users.userState\n// export const currentUsersState = state => state.users.usersState\n// export const currentUserParam = state => state.users.param\n\nexport default chatbotSlice.reducer;","map":{"version":3,"sources":["C:/Users/bitcamp/ai-work/cofin-msa-organ/frontend/src/features/chatbot/reducer/chatbotSlice.js"],"names":["createAsyncThunk","createSlice","chatbotAPI","chatbotSlice","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,UAAT,QAA2B,IAA3B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAGF,WAAW,CAAC,CACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7CiC,CAAD,CAAhC,C,CAgDA;AACA;AACA;;AACA,eAAeE,YAAY,CAACC,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { chatbotAPI } from \"..\";\r\n\r\n// const userJoinPage = async (x) => {\r\n//    const res = await userAPI.userJoin(x)\r\n//    return res.data\r\n// }\r\n// const EXIST = async (x) => {\r\n//   const res = await userAPI.exist(x)\r\n//   return res.data\r\n// }\r\n// const userDetailPage = async (x) => {\r\n//   const res = await userAPI.userDetail(x)\r\n//   return res.data\r\n// }\r\n\r\n\r\n// export const joinPage = createAsyncThunk('users/join', userJoinPage)\r\n// export const exist = createAsyncThunk('users/exist', EXIST)\r\n// export const detailPage = createAsyncThunk('users/dtail', userDetailPage)\r\n// export const listPage = createAsyncThunk('users/list', userListPage)\r\n// export const loginPage = createAsyncThunk('users/login', userLoginPage)\r\n\r\nconst chatbotSlice = createSlice({\r\n//   name: 'users',\r\n//   initialState: {\r\n//     userState: {\r\n//       username:'', password:'', email:'', name:'', regDate: ''\r\n//     },\r\n//     usersState: [],\r\n//     type: '',\r\n//     keyword: '',\r\n//     params: {}\r\n//   },\r\n//   reducers: {},\r\n//   extraReducers: {\r\n//     [joinPage.fulfilled]: ( state, action ) => { \r\n//       state.userState = action.payload \r\n//       window.location.href = `/login`\r\n//     },\r\n//     [exist.fulfilled]: ( state, action ) => { \r\n//       if(action.payload){window.location.href='/add'}\r\n//       else{ alert(`사용가능함`) }\r\n//     },\r\n//     [detailPage.fulfilled]: ( state, {meta, payload} ) => { state.userState = payload },\r\n//     [listPage.fulfilled]: ( state, {meta, payload} ) => { state.usersState = payload },\r\n//     [loginPage.fulfilled]: ( state, {meta, payload} ) => {\r\n//       state.userState = payload\r\n//       window.localStorage.setItem('sessionUser', JSON.stringify(payload))\r\n//       if(payload.username != null){\r\n//         alert(`${payload.name}님 환영합니다`)\r\n//         window.location.href = `/detail`\r\n//       }else{\r\n//         alert('아이디, 비번 오류로 로그인 실패  ')\r\n//         changeNull(['username','password'])\r\n//       }\r\n//     },\r\n//     [modifyPage.fulfilled]: ( state, action ) => { \r\n//       // state.userState = action.payload \r\n//       alert(`회원 정보 수정 성공 ${action.data}`)\r\n//       window.localStorage.setItem('sessionUser', JSON.stringify(action.payload))\r\n//       window.location.href = `/detail`\r\n//     },\r\n//     [removePage.fulfilled]: ( state, {meta, payload }) => { \r\n//       window.localStorage.removeItem('sessinUser')\r\n//       window.localStorage.clear()\r\n//       window.location.href = '/home'\r\n//     }\r\n//   }\r\n\r\n})\r\n// export const currentUserState = state => state.users.userState\r\n// export const currentUsersState = state => state.users.usersState\r\n// export const currentUserParam = state => state.users.param\r\nexport default chatbotSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}