{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bitcamp\\\\ai-work\\\\cofin-msa-organ\\\\frontend\\\\src\\\\features\\\\map\\\\components\\\\LocalMap.js\",\n    _s = $RefreshSig$();\n\nimport { Map, MapMarker } from 'react-kakao-maps-sdk';\nimport React, { useState, useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { casesPoints, medPoints } from \"../reducer/mapSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\n\nfunction LocalMap() {\n  _s();\n\n  const dispatch = useDispatch();\n  const [state, setState] = useState();\n  const geoInfo = window.localStorage.getItem('sessionGeo').split(',');\n  const [map, setMap] = useState();\n  let points = useSelector(state => state.map.mapsState.map(x => {\n    return {\n      title: x.name,\n      latlng: {\n        lat: x.latitude,\n        lng: x.longitude\n      }\n    };\n  }));\n  points = [...points, {\n    title: '현재 위치',\n    latlng: {\n      lat: geoInfo[0],\n      lng: geoInfo[1]\n    }\n  }]; // const bounds = useMemo(() => {\n  //   const bounds = new kakao.maps.LatLngBounds();\n  //   points.forEach(point => {\n  //       console.log(point.title)\n  //     bounds.extend(new kakao.maps.LatLng(point.latlng.lat, point.latlng.lng))\n  //   });\n  //   return bounds;\n  // }, [points])\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(OptionUl, {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\uD45C\\uC2DC \\uB300\\uC0C1 \\uC120\\uD0DD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"sel\",\n          onChange: e => {\n            if (e.target.value == 'medpoint') {\n              dispatch(medPoints({\n                'latitude': geoInfo[0],\n                'longitude': geoInfo[1]\n              }));\n            } else {\n              dispatch(casesPoints({\n                'latitude': geoInfo[0],\n                'longitude': geoInfo[1]\n              }));\n            }\n\n            console.log(points); // if (map) map.setBounds(bounds)\n          },\n          children: /*#__PURE__*/_jsxDEV(\"optgroup\", {\n            label: \"\\uD45C\\uC2DC \\uB300\\uC0C1 \\uC120\\uD0DD\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"medpoint\",\n              children: \"\\uC120\\uBCC4 \\uC9C4\\uB8CC\\uC18C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"cases\",\n              children: \"\\uD655\\uC9C4\\uC790 \\uBC1C\\uC0DD \\uC704\\uCE58\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Map // 지도를 표시할 Container\n    , {\n      center: {\n        // 지도의 중심좌표\n        lat: geoInfo[0],\n        lng: geoInfo[1]\n      },\n      style: {\n        width: \"1000px\",\n        height: \"600px\"\n      },\n      level: 5 // 지도의 확대 레벨\n      ,\n      onCreate: setMap,\n      children: [/*#__PURE__*/_jsxDEV(MapMarker, {\n        position: {\n          lat: geoInfo[0],\n          lng: geoInfo[1]\n        },\n        title: \"\\uD604\\uC7AC \\uC704\\uCE58\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), points.map((position, index) => /*#__PURE__*/_jsxDEV(MapMarker, {\n        position: position.latlng // 마커를 표시할 위치\n        ,\n        title: position.title // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\n        ,\n        image: {\n          src: \"features/map/data/me.png\",\n          // 마커이미지의 주소입니다\n          size: {\n            width: 64,\n            height: 69\n          },\n          // 마커이미지의 크기입니다\n          options: {\n            offset: {\n              x: 27,\n              y: 69\n            } // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.\n\n          }\n        }\n      }, `${position.title}-${position.latlng}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(LocalMap, \"T2iHzLsfOZttrrweHfGqDDciTxU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = LocalMap;\nexport default LocalMap;\nconst OptionUl = styled.ul`\n    list-style: none;\n`;\n_c2 = OptionUl;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LocalMap\");\n$RefreshReg$(_c2, \"OptionUl\");","map":{"version":3,"sources":["C:/Users/bitcamp/ai-work/cofin-msa-organ/frontend/src/features/map/components/LocalMap.js"],"names":["Map","MapMarker","React","useState","useMemo","styled","useDispatch","useSelector","casesPoints","medPoints","kakao","window","LocalMap","dispatch","state","setState","geoInfo","localStorage","getItem","split","map","setMap","points","mapsState","x","title","name","latlng","lat","latitude","lng","longitude","e","target","value","console","log","width","height","position","index","src","size","options","offset","y","OptionUl","ul"],"mappings":"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","sourcesContent":["import { Map, MapMarker } from 'react-kakao-maps-sdk';\r\nimport React, {useState, useMemo} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { casesPoints, medPoints } from \"../reducer/mapSlice\";\r\nconst { kakao } = window; \r\n\r\nfunction LocalMap() {\r\n    const dispatch = useDispatch()\r\n    const [state, setState] = useState()\r\n    const geoInfo = window.localStorage.getItem('sessionGeo').split(',')\r\n    const [map, setMap] = useState()\r\n    let points = useSelector(state => state.map.mapsState.map(\r\n        x => {return {title: x.name,\r\n                      latlng: {lat: x.latitude, lng:x.longitude}}}\r\n    )) \r\n    points = [...points, {title: '현재 위치', latlng: {lat: geoInfo[0], lng: geoInfo[1]}}]\r\n\r\n    // const bounds = useMemo(() => {\r\n    //   const bounds = new kakao.maps.LatLngBounds();\r\n\r\n    //   points.forEach(point => {\r\n    //       console.log(point.title)\r\n    //     bounds.extend(new kakao.maps.LatLng(point.latlng.lat, point.latlng.lng))\r\n    //   });\r\n    //   return bounds;\r\n    // }, [points])\r\n\r\n    return(<>\r\n    <OptionUl>\r\n        <li>\r\n            <label>표시 대상 선택</label><br/>\r\n            <select id=\"sel\" onChange={(e) => {\r\n            if (e.target.value == 'medpoint'){\r\n                dispatch(medPoints({'latitude': geoInfo[0], 'longitude': geoInfo[1]}))\r\n            }else{\r\n                dispatch(casesPoints({'latitude': geoInfo[0], 'longitude': geoInfo[1]}))\r\n            }\r\n            console.log(points)\r\n            // if (map) map.setBounds(bounds)\r\n          }}>\r\n                <optgroup label=\"표시 대상 선택\">\r\n                  <option value=\"medpoint\">선별 진료소</option>  \r\n                  <option value=\"cases\">확진자 발생 위치</option>  \r\n                </optgroup>\r\n            </select>\r\n        </li>\r\n    </OptionUl>\r\n    <Map // 지도를 표시할 Container\r\n          center={{\r\n            // 지도의 중심좌표\r\n            lat: geoInfo[0],\r\n            lng: geoInfo[1],\r\n          }}\r\n          style={{\r\n            width: \"1000px\",\r\n            height: \"600px\",\r\n          }}\r\n          level={5} // 지도의 확대 레벨\r\n          onCreate={setMap}\r\n        >\r\n            <MapMarker\r\n            position={{lat: geoInfo[0], lng:geoInfo[1]}}\r\n            title='현재 위치'\r\n            />\r\n          {points.map((position, index) => (\r\n        <MapMarker\r\n          key={`${position.title}-${position.latlng}`}\r\n          position={position.latlng} // 마커를 표시할 위치\r\n          title={position.title} // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\r\n          image={{\r\n            src: \"features/map/data/me.png\", // 마커이미지의 주소입니다\r\n            size: {\r\n              width: 64,\r\n              height: 69,\r\n            }, // 마커이미지의 크기입니다\r\n            options: {\r\n              offset: {\r\n                x: 27,\r\n                y: 69,\r\n              }, // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.\r\n            },\r\n          }}\r\n        />\r\n      ))}\r\n        </Map>\r\n        \r\n    </>);\r\n}\r\n\r\nexport default LocalMap;\r\n\r\nconst OptionUl = styled.ul`\r\n    list-style: none;\r\n`\r\n"]},"metadata":{},"sourceType":"module"}