{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bitcamp\\\\ai-work\\\\cofin-msa-organ\\\\frontend\\\\src\\\\features\\\\map\\\\components\\\\LocalMap.js\",\n    _s = $RefreshSig$();\n\nimport { Map, MapMarker } from 'react-kakao-maps-sdk';\nimport React, { useState, useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { casesPoints, medPoints } from \"../reducer/mapSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\n\nfunction LocalMap() {\n  _s();\n\n  const dispatch = useDispatch();\n  const [state, setState] = useState();\n  const [geo, setGeo] = useState();\n  setGeo(window.localStorage.getItem('sessionGeo').split(','));\n  const [map, setMap] = useState();\n  let points = useSelector(state => state.map.mapsState.map(x => {\n    return {\n      title: x.name,\n      latlng: {\n        lat: x.latitude,\n        lng: x.longitude\n      }\n    };\n  }));\n  points = [...points, {\n    title: '현재 위치',\n    latlng: {\n      lat: geo[0],\n      lng: geo[1]\n    }\n  }];\n  const bounds = useMemo(() => {\n    const bounds = new kakao.maps.LatLngBounds();\n    points.forEach(point => {\n      bounds.extend(new kakao.maps.LatLng(point.latlng.lat, point.latlng.lng));\n    });\n    return bounds;\n  }, [points]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Map // 지도를 표시할 Container\n    , {\n      center: {\n        // 지도의 중심좌표\n        lat: geo[0],\n        lng: geo[1]\n      },\n      style: {\n        width: \"1000px\",\n        height: \"600px\"\n      },\n      level: 5 // 지도의 확대 레벨\n      ,\n      onCreate: setMap,\n      onCenterChanged: map => setState({\n        level: map.getLevel(),\n        center: {\n          lat: geo[0],\n          lng: geo[1]\n        }\n      }),\n      children: [/*#__PURE__*/_jsxDEV(MapMarker, {\n        position: {\n          lat: geo[0],\n          lng: geo[1]\n        },\n        title: \"\\uD604\\uC7AC \\uC704\\uCE58\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), points.map((position, index) => /*#__PURE__*/_jsxDEV(MapMarker, {\n        position: position.latlng // 마커를 표시할 위치\n        ,\n        title: position.title // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\n\n      }, `${position.title}-${position.latlng}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(OptionUl, {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\uD45C\\uC2DC \\uB300\\uC0C1 \\uC120\\uD0DD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"sel\",\n          onChange: e => {\n            if (e.target.value == 'medpoint') {\n              dispatch(medPoints({\n                'latitude': geo[0],\n                'longitude': geo[1]\n              }));\n            } else {\n              dispatch(casesPoints({\n                'latitude': geo[0],\n                'longitude': geo[1]\n              }));\n            }\n\n            if (map) map.setBounds(bounds);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"optgroup\", {\n            label: \"\\uD45C\\uC2DC \\uB300\\uC0C1 \\uC120\\uD0DD\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"medpoint\",\n              children: \"\\uC120\\uBCC4 \\uC9C4\\uB8CC\\uC18C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"cases\",\n              children: \"\\uD655\\uC9C4\\uC790 \\uBC1C\\uC0DD \\uC704\\uCE58\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(LocalMap, \"cwiLNv2LzZNACs9gy0vQh9TGnHY=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = LocalMap;\nexport default LocalMap;\nconst OptionUl = styled.ul`\n    list-style: none;\n`;\n_c2 = OptionUl;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LocalMap\");\n$RefreshReg$(_c2, \"OptionUl\");","map":{"version":3,"sources":["C:/Users/bitcamp/ai-work/cofin-msa-organ/frontend/src/features/map/components/LocalMap.js"],"names":["Map","MapMarker","React","useState","useMemo","styled","useDispatch","useSelector","casesPoints","medPoints","kakao","window","LocalMap","dispatch","state","setState","geo","setGeo","localStorage","getItem","split","map","setMap","points","mapsState","x","title","name","latlng","lat","latitude","lng","longitude","bounds","maps","LatLngBounds","forEach","point","extend","LatLng","width","height","level","getLevel","center","position","index","e","target","value","setBounds","OptionUl","ul"],"mappings":"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","sourcesContent":["import { Map, MapMarker } from 'react-kakao-maps-sdk';\r\nimport React, {useState, useMemo} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { casesPoints, medPoints } from \"../reducer/mapSlice\";\r\nconst { kakao } = window; \r\n\r\nfunction LocalMap() {\r\n    const dispatch = useDispatch()\r\n    const [state, setState] = useState()\r\n    const [geo, setGeo] = useState()\r\n    setGeo(window.localStorage.getItem('sessionGeo').split(','))\r\n    const [map, setMap] = useState()\r\n    let points = useSelector(state => state.map.mapsState.map(\r\n        x => {return {title: x.name,\r\n                      latlng: {lat: x.latitude, lng:x.longitude}}}\r\n    )) \r\n    points = [...points, {title: '현재 위치', latlng: {lat: geo[0], lng: geo[1]}}]\r\n\r\n    const bounds = useMemo(() => {\r\n      const bounds = new kakao.maps.LatLngBounds();\r\n\r\n      points.forEach(point => {\r\n        bounds.extend(new kakao.maps.LatLng(point.latlng.lat, point.latlng.lng))\r\n      });\r\n      return bounds;\r\n    }, [points])\r\n\r\n    return(<>\r\n    <Map // 지도를 표시할 Container\r\n          center={{\r\n            // 지도의 중심좌표\r\n            lat: geo[0],\r\n            lng: geo[1],\r\n          }}\r\n          style={{\r\n            width: \"1000px\",\r\n            height: \"600px\",\r\n          }}\r\n          level={5} // 지도의 확대 레벨\r\n          onCreate={setMap}\r\n          onCenterChanged={(map) => setState({\r\n            level: map.getLevel(),\r\n            center: {\r\n                lat: geo[0],\r\n                lng: geo[1],\r\n            }\r\n          })}\r\n        >\r\n            <MapMarker\r\n            position={{lat: geo[0], lng:geo[1]}}\r\n            title='현재 위치'\r\n            />\r\n          {points.map((position, index) => (\r\n        <MapMarker\r\n          key={`${position.title}-${position.latlng}`}\r\n          position={position.latlng} // 마커를 표시할 위치\r\n          title={position.title} // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\r\n        />\r\n      ))}\r\n        </Map>\r\n        <OptionUl>\r\n        <li>\r\n            <label>표시 대상 선택</label><br/>\r\n            <select id=\"sel\" onChange={(e) => {\r\n            if (e.target.value == 'medpoint'){\r\n                dispatch(medPoints({'latitude': geo[0], 'longitude': geo[1]}))\r\n            }else{\r\n                dispatch(casesPoints({'latitude': geo[0], 'longitude': geo[1]}))\r\n            }\r\n            if (map) map.setBounds(bounds)\r\n          }}>\r\n                <optgroup label=\"표시 대상 선택\">\r\n                  <option value=\"medpoint\">선별 진료소</option>  \r\n                  <option value=\"cases\">확진자 발생 위치</option>  \r\n                </optgroup>\r\n            </select>\r\n        </li>\r\n    </OptionUl>\r\n    </>);\r\n}\r\n\r\nexport default LocalMap;\r\n\r\nconst OptionUl = styled.ul`\r\n    list-style: none;\r\n`\r\n"]},"metadata":{},"sourceType":"module"}