{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\ho\\\\TeamProject\\\\organ\\\\frontend\\\\src\\\\features\\\\chatbot\\\\components\\\\Chat5.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport '../ChatBot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chat5() {\n  _s();\n\n  const [userInput, setUserInput] = useState('');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"bot-cover-photo\",\n        src: \"https://www.userlike.com/api/proxy/resize/do-i-need-a-chatbot/header-chat-box.png?height=720\",\n        alt: \"chatbot-pic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"human-input\",\n      children: /*#__PURE__*/_jsxDEV(InputGroup, {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          className: \"mb-2\",\n          type: \"text\",\n          placeholder: \"Ask me something\",\n          value: userInput,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chat5, \"LB5RX8bhx9UtyfDkZOdgmRjMvrI=\");\n\n_c = Chat5;\nconst [userHistory, setUserHistory] = useState([]);\nconst [botHistory, setBotHistory] = useState([]);\n\nconst handleChange = e => setUserInput(e.target.value);\n\nconst matchReply = userInput => {\n  const trigger = [[\"hi\", \"hey\", \"hello\"], [\"how are you\", \"how are things\", \"how you doing\"], [\"what is going on\", \"what is up\"], [\"happy\", \"good\", \"amazing\", \"fantastic\", \"cool\"], [\"bad\", \"bored\", \"tired\", \"sad\"], [\"thanks\", \"thank you\"], [\"bye\", \"good bye\", \"goodbye\"]];\n  const reply = [[\"Hello\", \"Hi\", \"It's nice seeing you!\"], [\"I'm doing good... how are you?\", \"I feel kind of lonely, how are you?\", \"I feel happy, how are you?\"], [\"Nothing much\", \"Exciting things!\", \"I'm happy to see you!\"], [\"Glad to hear it\", \"Yayyy!! That's the spirit!\"], [\"There is always a rainbow after the rain!\"], [\"You're welcome\", \"No problem\", \"It's my pleasure!\"], [\"Goodbye, it was a nice talk\"]];\n  const alternative = [\"Same\", \"Go on...\", \"Try again please?\", \"I'm listening...\"];\n  let botMsg = generateReply(trigger, reply, userInput);\n\n  if (!botMsg) {\n    botMsg = alternative[Math.floor(Math.random() * alternative.length)];\n  }\n\n  setBotHistory([botMsg, ...botHistory]);\n};\n\nconst generateReply = (trigger, reply, text) => {\n  let item;\n  let items;\n\n  for (let x = 0; x < trigger.length; x++) {\n    for (let y = 0; y < reply.length; y++) {\n      if (text.includes(trigger[x][y])) {\n        items = reply[x];\n        item = items[Math.floor(Math.random() * items.length)];\n      }\n    }\n  }\n\n  return item;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat5\");","map":{"version":3,"sources":["C:/Users/ASUS/ho/TeamProject/organ/frontend/src/features/chatbot/components/Chat5.js"],"names":["React","useState","Form","InputGroup","Chat5","userInput","setUserInput","handleChange","userHistory","setUserHistory","botHistory","setBotHistory","e","target","value","matchReply","trigger","reply","alternative","botMsg","generateReply","Math","floor","random","length","text","item","items","x","y","includes"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport '../ChatBot.css'\r\n\r\nexport default function Chat5(){\r\n    const [userInput, setUserInput] = useState('')\r\n    \r\n\r\n    return (\r\n        <div className='chatbot-card'>\r\n            <div>\r\n                <img \r\n                    className='bot-cover-photo'\r\n                    src='https://www.userlike.com/api/proxy/resize/do-i-need-a-chatbot/header-chat-box.png?height=720' \r\n                    alt='chatbot-pic'\r\n                />  \r\n            </div>\r\n\r\n            <div className='human-input'>\r\n                <InputGroup className=\"mb-3\">\r\n\r\n                    <Form.Control\r\n                        className=\"mb-2\"\r\n                        type=\"text\" \r\n                        placeholder=\"Ask me something\"\r\n                        value={userInput}\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                </InputGroup>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst [userHistory, setUserHistory] = useState([])\r\nconst [botHistory, setBotHistory] = useState([])\r\nconst handleChange = (e) => setUserInput(e.target.value)\r\n\r\nconst matchReply = (userInput) => {\r\n    const trigger = [\r\n        [\"hi\", \"hey\", \"hello\"],\r\n        [\"how are you\", \"how are things\", \"how you doing\"],\r\n        [\"what is going on\", \"what is up\"],\r\n        [\"happy\", \"good\", \"amazing\", \"fantastic\", \"cool\"],\r\n        [\"bad\", \"bored\", \"tired\", \"sad\"],\r\n        [\"thanks\", \"thank you\"],\r\n        [\"bye\", \"good bye\", \"goodbye\"]\r\n    ];\r\n\r\nconst reply = [\r\n    [\"Hello\", \"Hi\", \"It's nice seeing you!\"],\r\n    [\"I'm doing good... how are you?\", \"I feel kind of lonely, how are you?\", \"I feel happy, how are you?\"],\r\n    [\"Nothing much\", \"Exciting things!\", \"I'm happy to see you!\"],\r\n    [\"Glad to hear it\", \"Yayyy!! That's the spirit!\"],\r\n    [\"There is always a rainbow after the rain!\"],\r\n    [\"You're welcome\", \"No problem\", \"It's my pleasure!\"],\r\n    [\"Goodbye, it was a nice talk\"]\r\n];\r\n\r\nconst alternative = [\"Same\", \"Go on...\", \"Try again please?\", \"I'm listening...\"];\r\n\r\nlet botMsg = generateReply(trigger, reply, userInput)\r\n\r\nif(!botMsg){\r\n    botMsg = alternative[Math.floor(Math.random()*alternative.length)]\r\n}\r\n\r\nsetBotHistory([botMsg, ...botHistory])\r\n\r\n}\r\n\r\nconst generateReply = (trigger, reply, text) => {\r\n    let item;\r\n    let items;\r\n    for (let x = 0; x < trigger.length; x++) {\r\n        for (let y = 0; y < reply.length; y++) {\r\n            if (text.includes(trigger[x][y])) {\r\n                items = reply[x];\r\n                item = items[Math.floor(Math.random() * items.length)];\r\n            }\r\n        }\r\n    }\r\n    return item;\r\n}"]},"metadata":{},"sourceType":"module"}