{"ast":null,"code":"// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n// import { userAPI } from 'features/map/';\n// const userJoinPage = async (x) => {\n//    const res = await userAPI.userJoin(x)\n//    return res.data\n// }\n// const EXIST = async (x) => {\n//   const res = await userAPI.exist(x)\n//   return res.data\n// }\n// const userDetailPage = async (x) => {\n//   const res = await userAPI.userDetail(x)\n//   return res.data\n// }\n// const userListPage = async ({page}) => {\n//   const res = await userAPI.userList(page)\n//   return res.data\n// }\n// const userLoginPage = async (x) => {\n//   const res = await userAPI.userLogin(x) \n//   return res.data\n// }\n// const userModifyPage = async (x) => {\n//   const res = await userAPI.userModify(x)\n//   return res.data\n// }\n// const userRemovePage = async (x) => {\n//   const res = await userAPI.userRemove(x)\n//   return res.data\n// }\n// export const joinPage = createAsyncThunk('users/join', userJoinPage)\n// export const exist = createAsyncThunk('users/exist', EXIST)\n// export const detailPage = createAsyncThunk('users/dtail', userDetailPage)\n// export const listPage = createAsyncThunk('users/list', userListPage)\n// export const loginPage = createAsyncThunk('users/login', userLoginPage)\n// export const modifyPage = createAsyncThunk('users/modify', userModifyPage)\n// export const removePage = createAsyncThunk('users/remove', userRemovePage)\n// // export const logout = () => {\n//   // window.localStorage.setItem('sessionUser','')\n//   // window.location.href='/home'\n// // }\n// const changeNull = ls =>{\n//   for(const i of ls ){\n//     document.getElementById(i).value = ''\n//   }\n// }\n// const mapSlice = createSlice({\n//   name: 'maps',\n//   initialState: {\n//     mapState: {\n//       id:'', type:'', shortName:'', name:'', lat: '', long: '', population: '', cases: '', medPointIdId\n//     },\n//     mapsState: [],\n//     type: '',\n//     keyword: '',\n//     params: {}\n//   },\n//   reducers: {},\n//   extraReducers: {\n//     [joinPage.fulfilled]: ( state, action ) => { \n//       state.userState = action.payload \n//       window.location.href = `/login`\n//     },\n//     [exist.fulfilled]: ( state, action ) => { \n//       if(action.payload){window.location.href='/add'}\n//       else{ alert(`사용가능함`) }\n//     },\n//     [detailPage.fulfilled]: ( state, {meta, payload} ) => { state.userState = payload },\n//     [listPage.fulfilled]: ( state, {meta, payload} ) => { state.usersState = payload },\n//     [loginPage.fulfilled]: ( state, {meta, payload} ) => {\n//       state.userState = payload\n//       window.localStorage.setItem('sessionUser', JSON.stringify(payload))\n//       if(payload.username != null){\n//         alert(`${payload.name}님 환영합니다`)\n//         window.location.href = `/detail`\n//       }else{\n//         alert('아이디, 비번 오류로 로그인 실패  ')\n//         changeNull(['username','password'])\n//       }\n//     },\n//     [modifyPage.fulfilled]: ( state, action ) => { \n//       // state.userState = action.payload \n//       alert(`회원 정보 수정 성공 ${action.data}`)\n//       window.localStorage.setItem('sessionUser', JSON.stringify(action.payload))\n//       window.location.href = `/detail`\n//     },\n//     [removePage.fulfilled]: ( state, {meta, payload }) => { \n//       window.localStorage.removeItem('sessinUser')\n//       window.localStorage.clear()\n//       window.location.href = '/home'\n//     }\n//   }\n// })\n// export const currentMapState = state => state.maps.mapState\n// export const currentMapsState = state => state.maps.mapsState\n// export const currentMapParam = state => state.maps.param\n// export default mapSlice.reducer;","map":{"version":3,"sources":["C:/Users/bitcamp/ai-work/cofin-msa-organ/frontend/src/features/map/reducer/mapSlice.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n// import { userAPI } from 'features/map/';\r\n\r\n// const userJoinPage = async (x) => {\r\n//    const res = await userAPI.userJoin(x)\r\n//    return res.data\r\n// }\r\n// const EXIST = async (x) => {\r\n//   const res = await userAPI.exist(x)\r\n//   return res.data\r\n// }\r\n// const userDetailPage = async (x) => {\r\n//   const res = await userAPI.userDetail(x)\r\n//   return res.data\r\n// }\r\n// const userListPage = async ({page}) => {\r\n//   const res = await userAPI.userList(page)\r\n//   return res.data\r\n// }\r\n// const userLoginPage = async (x) => {\r\n//   const res = await userAPI.userLogin(x) \r\n//   return res.data\r\n// }\r\n// const userModifyPage = async (x) => {\r\n//   const res = await userAPI.userModify(x)\r\n//   return res.data\r\n// }\r\n// const userRemovePage = async (x) => {\r\n//   const res = await userAPI.userRemove(x)\r\n//   return res.data\r\n// }\r\n\r\n// export const joinPage = createAsyncThunk('users/join', userJoinPage)\r\n// export const exist = createAsyncThunk('users/exist', EXIST)\r\n// export const detailPage = createAsyncThunk('users/dtail', userDetailPage)\r\n// export const listPage = createAsyncThunk('users/list', userListPage)\r\n// export const loginPage = createAsyncThunk('users/login', userLoginPage)\r\n// export const modifyPage = createAsyncThunk('users/modify', userModifyPage)\r\n// export const removePage = createAsyncThunk('users/remove', userRemovePage)\r\n// // export const logout = () => {\r\n//   // window.localStorage.setItem('sessionUser','')\r\n//   // window.location.href='/home'\r\n// // }\r\n\r\n// const changeNull = ls =>{\r\n//   for(const i of ls ){\r\n//     document.getElementById(i).value = ''\r\n//   }\r\n// }\r\n// const mapSlice = createSlice({\r\n//   name: 'maps',\r\n//   initialState: {\r\n//     mapState: {\r\n//       id:'', type:'', shortName:'', name:'', lat: '', long: '', population: '', cases: '', medPointIdId\r\n//     },\r\n//     mapsState: [],\r\n//     type: '',\r\n//     keyword: '',\r\n//     params: {}\r\n//   },\r\n//   reducers: {},\r\n//   extraReducers: {\r\n//     [joinPage.fulfilled]: ( state, action ) => { \r\n//       state.userState = action.payload \r\n//       window.location.href = `/login`\r\n//     },\r\n//     [exist.fulfilled]: ( state, action ) => { \r\n//       if(action.payload){window.location.href='/add'}\r\n//       else{ alert(`사용가능함`) }\r\n//     },\r\n//     [detailPage.fulfilled]: ( state, {meta, payload} ) => { state.userState = payload },\r\n//     [listPage.fulfilled]: ( state, {meta, payload} ) => { state.usersState = payload },\r\n//     [loginPage.fulfilled]: ( state, {meta, payload} ) => {\r\n//       state.userState = payload\r\n//       window.localStorage.setItem('sessionUser', JSON.stringify(payload))\r\n//       if(payload.username != null){\r\n//         alert(`${payload.name}님 환영합니다`)\r\n//         window.location.href = `/detail`\r\n//       }else{\r\n//         alert('아이디, 비번 오류로 로그인 실패  ')\r\n//         changeNull(['username','password'])\r\n//       }\r\n//     },\r\n//     [modifyPage.fulfilled]: ( state, action ) => { \r\n//       // state.userState = action.payload \r\n//       alert(`회원 정보 수정 성공 ${action.data}`)\r\n//       window.localStorage.setItem('sessionUser', JSON.stringify(action.payload))\r\n//       window.location.href = `/detail`\r\n//     },\r\n//     [removePage.fulfilled]: ( state, {meta, payload }) => { \r\n//       window.localStorage.removeItem('sessinUser')\r\n//       window.localStorage.clear()\r\n//       window.location.href = '/home'\r\n//     }\r\n//   }\r\n\r\n// })\r\n// export const currentMapState = state => state.maps.mapState\r\n// export const currentMapsState = state => state.maps.mapsState\r\n// export const currentMapParam = state => state.maps.param\r\n// export default mapSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}