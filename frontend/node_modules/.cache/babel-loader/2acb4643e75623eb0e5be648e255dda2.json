{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { chatbot, chatbotAPI } from \"..\";\n\nconst ANSWER = async x => {\n  //  const res = await chatbotAPI.findAnswer(x)\n  console.log(`넘겨받은 페이로드: ${x}`); //  const res = await x\n  //  return res.data\n};\n\n_c = ANSWER;\n\nconst STATUS = async x => {\n  console.log(`넘겨받은 status: ${x}`); // const res = await chatbotAPI.statusAnswer(x)\n  // return res.data\n};\n\n_c2 = STATUS;\nexport const answer = createAsyncThunk('/chat', ANSWER);\nexport const answerStatus = createAsyncThunk('/status', STATUS);\nconst chatbotSlice = createSlice({\n  name: 'bot',\n  initialState: {\n    botState: {\n      symptom: '',\n      level: '',\n      details: '',\n      answer: ''\n    },\n    botsState: [],\n    type: '',\n    keyword: '',\n    params: {}\n  },\n  reducers: {},\n  extraReducers: {\n    [answer.fulfilled]: (state, action) => {\n      state.botState = action.payload;\n    },\n    [answerStatus.fulfilled]: (state, action) => {\n      state.botState = action.payload;\n    }\n  }\n});\nexport const currentBotState = state => state.bot.botState;\nexport const currentBotsState = state => state.bot.botsState; // export const currentBotParam = state => state.bot.param\n\nexport default chatbotSlice.reducer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ANSWER\");\n$RefreshReg$(_c2, \"STATUS\");","map":{"version":3,"sources":["C:/Users/bitcamp/ai-work/cofin-msa-organ/frontend/src/features/chatbot/reducer/chatbotSlice.js"],"names":["createAsyncThunk","createSlice","chatbot","chatbotAPI","ANSWER","x","console","log","STATUS","answer","answerStatus","chatbotSlice","name","initialState","botState","symptom","level","details","botsState","type","keyword","params","reducers","extraReducers","fulfilled","state","action","payload","currentBotState","bot","currentBotsState","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,IAApC;;AAEA,MAAMC,MAAM,GAAG,MAAOC,CAAP,IAAa;AAC1B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,cAAaF,CAAE,EAA5B,EAF0B,CAG1B;AACA;AACD,CALD;;KAAMD,M;;AAMN,MAAMI,MAAM,GAAG,MAAOH,CAAP,IAAa;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeF,CAAE,EAA9B,EAD0B,CAE1B;AACA;AACD,CAJD;;MAAMG,M;AAON,OAAO,MAAMC,MAAM,GAAGT,gBAAgB,CAAC,OAAD,EAAUI,MAAV,CAA/B;AACP,OAAO,MAAMM,YAAY,GAAGV,gBAAgB,CAAC,SAAD,EAAYQ,MAAZ,CAArC;AAEP,MAAMG,YAAY,GAAGV,WAAW,CAAC;AAC/BW,EAAAA,IAAI,EAAE,KADyB;AAE/BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,OAAO,EAAE,EADD;AACKC,MAAAA,KAAK,EAAE,EADZ;AACgBC,MAAAA,OAAO,EAAE,EADzB;AAC6BR,MAAAA,MAAM,EAAE;AADrC,KADE;AAIZS,IAAAA,SAAS,EAAE,EAJC;AAKZC,IAAAA,IAAI,EAAE,EALM;AAMZC,IAAAA,OAAO,EAAE,EANG;AAOZC,IAAAA,MAAM,EAAE;AAPI,GAFiB;AAW/BC,EAAAA,QAAQ,EAAE,EAXqB;AAY/BC,EAAAA,aAAa,EAAE;AACb,KAACd,MAAM,CAACe,SAAR,GAAoB,CAAEC,KAAF,EAASC,MAAT,KAAqB;AACvCD,MAAAA,KAAK,CAACX,QAAN,GAAiBY,MAAM,CAACC,OAAxB;AACD,KAHY;AAIb,KAACjB,YAAY,CAACc,SAAd,GAA0B,CAAEC,KAAF,EAASC,MAAT,KAAqB;AAC7CD,MAAAA,KAAK,CAACX,QAAN,GAAiBY,MAAM,CAACC,OAAxB;AACD;AANY;AAZgB,CAAD,CAAhC;AAsBA,OAAO,MAAMC,eAAe,GAAGH,KAAK,IAAIA,KAAK,CAACI,GAAN,CAAUf,QAA3C;AACP,OAAO,MAAMgB,gBAAgB,GAAGL,KAAK,IAAIA,KAAK,CAACI,GAAN,CAAUX,SAA5C,C,CACP;;AACA,eAAeP,YAAY,CAACoB,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { chatbot, chatbotAPI } from \"..\";\r\n\r\nconst ANSWER = async (x) => {\r\n  //  const res = await chatbotAPI.findAnswer(x)\r\n  console.log(`넘겨받은 페이로드: ${x}`)\r\n  //  const res = await x\r\n  //  return res.data\r\n}\r\nconst STATUS = async (x) => {\r\n  console.log(`넘겨받은 status: ${x}`)\r\n  // const res = await chatbotAPI.statusAnswer(x)\r\n  // return res.data\r\n}\r\n\r\n\r\nexport const answer = createAsyncThunk('/chat', ANSWER)\r\nexport const answerStatus = createAsyncThunk('/status', STATUS)\r\n\r\nconst chatbotSlice = createSlice({\r\n  name: 'bot',\r\n  initialState: {\r\n    botState: {\r\n      symptom: '', level: '', details: '', answer: ''\r\n    },\r\n    botsState: [],\r\n    type: '',\r\n    keyword: '',\r\n    params: {}\r\n  },\r\n  reducers: {},\r\n  extraReducers: {\r\n    [answer.fulfilled]: ( state, action ) => { \r\n      state.botState = action.payload \r\n    },\r\n    [answerStatus.fulfilled]: ( state, action ) => { \r\n      state.botState = action.payload \r\n    },\r\n  }\r\n\r\n})\r\nexport const currentBotState = state => state.bot.botState\r\nexport const currentBotsState = state => state.bot.botsState\r\n// export const currentBotParam = state => state.bot.param\r\nexport default chatbotSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}