{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\ho\\\\TeamProject\\\\organ\\\\frontend\\\\src\\\\features\\\\chatbot\\\\components\\\\Chat.js\";\nimport ChatBot from \"react-simple-chatbot\";\nimport React, { Component } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport { render } from \"@testing-library/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Chat = () => {\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: {\n      background: \"#f5f8fb\",\n      fontFamily: \"Helvetica Neue\",\n      headerBgColor: \"#EF6C00\",\n      headerFontColor: \"#fff\",\n      headerFontSize: \"15px\",\n      botBubbleColor: \"#EF6C00\",\n      botFontColor: \"#fff\",\n      userBubbleColor: \"#fff\",\n      userFontColor: \"#4a4a4a\"\n    },\n    children: /*#__PURE__*/_jsxDEV(ChatBot, {\n      steps: [{\n        id: 'q-name',\n        message: 'What is your name??',\n        trigger: 'name'\n      }, {\n        id: 'name',\n        user: true,\n        trigger: 'a-name'\n      }, {\n        id: 'a-name',\n        message: 'Hi {previousValue}, nice to meet you!',\n        trigger: 'q-hobby'\n      }, {\n        id: 'q-hobby',\n        message: 'What is your hobby?',\n        trigger: 'hobby'\n      }, {\n        id: 'hobby',\n        user: true,\n        trigger: 'a-hobby'\n      }, {\n        id: 'a-hobby',\n        message: \"{previousValue}? That's cool!\",\n        trigger: 'q-submit'\n      }, {\n        id: \"q-submit\",\n        message: \"Can I remember you?\",\n        trigger: \"submit\"\n      }, {\n        id: \"submit\",\n        options: [{\n          value: \"y\",\n          label: \"Yes\",\n          trigger: \"end-message\"\n        }, {\n          value: \"n\",\n          label: \"No\",\n          trigger: \"no-submit\"\n        }]\n      }, {\n        id: \"no-submit\",\n        message: \"Your information was not submitted.\",\n        end: true\n      }, {\n        id: \"end-message\",\n        component: /*#__PURE__*/_jsxDEV(Post, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 24\n        }, this),\n        asMessage: true,\n        trigger: 'q-re-start'\n      }, {\n        id: 'q-re-start',\n        message: \"Do you want to do it again?\",\n        trigger: 're-start'\n      }, {\n        id: 're-start',\n        options: [{\n          value: 'y',\n          label: \"Yes\",\n          trigger: \"q-name\"\n        }, {\n          value: 'n',\n          label: \"No\",\n          trigger: \"stop\"\n        }]\n      }, {\n        id: 'stop',\n        message: 'Ok! bye~',\n        end: true\n      }],\n      botAvatar: require(\"./data/icon.png\").default,\n      userAvatar: require(\"./data/user.png\").default\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Chat;\nexport default Chat;\nexport function Post(props) {\n  const {\n    steps\n  } = props;\n  const {\n    submit,\n    name,\n    hobby\n  } = steps;\n  const state = {\n    submit,\n    name,\n    hobby\n  };\n  const keys = [...state.keys];\n  const userObject = {\n    submit: state.submit.value,\n    name: state.name.value,\n    hoby: state.hobby.value\n  };\n  console.log(state);\n  console.log(`data: ${JSON.stringify(userObject)}`);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Thank you! I'll remember you.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n} // export class Post extends Component {\n//   constructor(props) {\n//     super(props);\n//     const { steps } = this.props;\n//     const { submit, name, hobby } = steps;\n//     this.state = { submit, name, hobby };\n//   }\n//   componentDidMount() {\n//     const userObject = {\n//       submit: this.state.submit.value,\n//       name: this.state.name.value,\n//       hoby: this.state.hobby.value,\n//     };\n//     alert(`data: ${JSON.stringify(userObject)}`);\n//     // axios.post(`/api`, userObject)\n//     // .then(res => {\n//     //     console.log(res.status)\n//     // }).catch(function(error) {\n//     //     console.log(error);\n//     // });\n//   }\n//   render() {\n//     return (\n//       <>\n//         <div>Thank you! I'll remember you.</div>\n//       </>\n//     );\n//   }\n// }\n\n_c2 = Post;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Chat\");\n$RefreshReg$(_c2, \"Post\");","map":{"version":3,"sources":["C:/Users/ASUS/ho/TeamProject/organ/frontend/src/features/chatbot/components/Chat.js"],"names":["ChatBot","React","Component","ThemeProvider","render","Chat","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","id","message","trigger","user","options","value","label","end","component","asMessage","require","default","Post","props","steps","submit","name","hobby","state","keys","userObject","hoby","console","log","JSON","stringify"],"mappings":"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","sourcesContent":["import ChatBot from \"react-simple-chatbot\";\r\nimport React, { Component } from \"react\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { render } from \"@testing-library/react\";\r\n\r\nconst Chat = () => {\r\n  return (\r\n    <ThemeProvider\r\n      theme={{\r\n        background: \"#f5f8fb\",\r\n        fontFamily: \"Helvetica Neue\",\r\n        headerBgColor: \"#EF6C00\",\r\n        headerFontColor: \"#fff\",\r\n        headerFontSize: \"15px\",\r\n        botBubbleColor: \"#EF6C00\",\r\n        botFontColor: \"#fff\",\r\n        userBubbleColor: \"#fff\",\r\n        userFontColor: \"#4a4a4a\",\r\n      }}\r\n    >\r\n      <ChatBot\r\n        steps={[\r\n          {\r\n            id: 'q-name',\r\n            message: 'What is your name??',\r\n            trigger: 'name',\r\n          },\r\n          {\r\n            id: 'name',\r\n            user: true,\r\n            trigger: 'a-name'\r\n          },\r\n          {\r\n            id: 'a-name',\r\n            message: 'Hi {previousValue}, nice to meet you!',\r\n            trigger: 'q-hobby'\r\n          },\r\n          {\r\n              id: 'q-hobby',\r\n              message: 'What is your hobby?',\r\n              trigger: 'hobby'\r\n          },\r\n          {\r\n              id: 'hobby',\r\n              user: true,\r\n              trigger: 'a-hobby'\r\n            },\r\n          {\r\n            id: 'a-hobby',\r\n            message: \"{previousValue}? That's cool!\",\r\n            trigger: 'q-submit'\r\n          },\r\n          {\r\n            id: \"q-submit\",\r\n            message: \"Can I remember you?\",\r\n            trigger: \"submit\",\r\n          },\r\n          {\r\n            id: \"submit\",\r\n            options: [\r\n              { value: \"y\", label: \"Yes\", trigger: \"end-message\" },\r\n              { value: \"n\", label: \"No\", trigger: \"no-submit\" },\r\n            ],\r\n          },\r\n          {\r\n            id: \"no-submit\",\r\n            message: \"Your information was not submitted.\",\r\n            end: true,\r\n          },\r\n          {\r\n            id: \"end-message\",\r\n            component: <Post />,\r\n            asMessage: true,\r\n            trigger: 'q-re-start'\r\n          },\r\n          {\r\n            id: 'q-re-start',\r\n            message: \"Do you want to do it again?\",\r\n            trigger: 're-start'\r\n          },\r\n          {\r\n            id: 're-start',\r\n            options: [\r\n              { value: 'y', label: \"Yes\", trigger: \"q-name\" },\r\n              { value: 'n', label: \"No\", trigger: \"stop\" },\r\n            ],\r\n          },\r\n          {\r\n            id: 'stop',\r\n            message: 'Ok! bye~',\r\n            end: true\r\n          }\r\n        ]}\r\n        botAvatar={require(\"./data/icon.png\").default}\r\n        userAvatar={require(\"./data/user.png\").default}\r\n      />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n\r\nexport function Post(props) {\r\n    const { steps } = props;\r\n    const { submit, name, hobby } = steps;\r\n    const state = { submit, name, hobby };\r\n    const keys = [ ...state.keys ]\r\n    const userObject = {\r\n      submit: state.submit.value,\r\n      name: state.name.value,\r\n      hoby: state.hobby.value,\r\n    };\r\n    console.log(state)\r\n    console.log(`data: ${JSON.stringify(userObject)}`)\r\n    return (\r\n      <>\r\n        <div>Thank you! I'll remember you.</div>\r\n      </>\r\n    );\r\n}\r\n\r\n\r\n// export class Post extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     const { steps } = this.props;\r\n//     const { submit, name, hobby } = steps;\r\n\r\n//     this.state = { submit, name, hobby };\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     const userObject = {\r\n//       submit: this.state.submit.value,\r\n//       name: this.state.name.value,\r\n//       hoby: this.state.hobby.value,\r\n//     };\r\n//     alert(`data: ${JSON.stringify(userObject)}`);\r\n//     // axios.post(`/api`, userObject)\r\n//     // .then(res => {\r\n//     //     console.log(res.status)\r\n//     // }).catch(function(error) {\r\n//     //     console.log(error);\r\n//     // });\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <>\r\n//         <div>Thank you! I'll remember you.</div>\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}