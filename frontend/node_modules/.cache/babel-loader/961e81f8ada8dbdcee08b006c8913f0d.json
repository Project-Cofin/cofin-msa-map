{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bitcamp\\\\ai-work\\\\cofin-msa-organ\\\\frontend\\\\src\\\\features\\\\map\\\\components\\\\LocalMap.js\",\n    _s = $RefreshSig$();\n\nimport { Map, MapMarker } from 'react-kakao-maps-sdk';\nimport React, { useState, useMemo } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\n\nfunction LocalMap() {\n  _s();\n\n  const [map, setMap] = useState();\n  const [points, setPoints] = useState([{\n    lat: 33.452278,\n    lng: 126.567803\n  }, {\n    lat: 33.452671,\n    lng: 126.574792\n  }, {\n    lat: 33.451744,\n    lng: 126.572441\n  }]);\n  const bounds = useMemo(() => {\n    const bounds = new kakao.maps.LatLngBounds();\n    points.forEach(point => {\n      bounds.extend(new kakao.maps.LatLng(point.lat, point.lng));\n    });\n    return bounds;\n  }, [points]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Map // 지도를 표시할 Container\n    , {\n      center: {\n        // 지도의 중심좌표\n        lat: 33.450701,\n        lng: 126.570667\n      },\n      style: {\n        width: \"100%\",\n        height: \"450px\"\n      },\n      level: 3 // 지도의 확대 레벨\n      ,\n      onCreate: setMap,\n      children: points.map(point => /*#__PURE__*/_jsxDEV(MapMarker, {\n        position: point\n      }, `${point.lat}-${point.lng}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 32\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (map) map.setBounds(bounds);\n      },\n      children: \"\\uC9C0\\uB3C4 \\uBC94\\uC704 \\uC7AC\\uC124\\uC815 \\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(LocalMap, \"A6caO9Ez1AdbAs+gh6Idsgri6Lw=\");\n\n_c = LocalMap;\nexport default LocalMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocalMap\");","map":{"version":3,"sources":["C:/Users/bitcamp/ai-work/cofin-msa-organ/frontend/src/features/map/components/LocalMap.js"],"names":["Map","MapMarker","React","useState","useMemo","kakao","window","LocalMap","map","setMap","points","setPoints","lat","lng","bounds","maps","LatLngBounds","forEach","point","extend","LatLng","width","height","setBounds"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,SAAd,QAA+B,sBAA/B;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,OAAzB,QAAuC,OAAvC;;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAYC,MAAlB;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAChB,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBN,QAAQ,EAA9B;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,CACnC;AAACS,IAAAA,GAAG,EAAE,SAAN;AAAiBC,IAAAA,GAAG,EAAC;AAArB,GADmC,EAEnC;AAACD,IAAAA,GAAG,EAAE,SAAN;AAAiBC,IAAAA,GAAG,EAAC;AAArB,GAFmC,EAGnC;AAACD,IAAAA,GAAG,EAAE,SAAN;AAAiBC,IAAAA,GAAG,EAAC;AAArB,GAHmC,CAAD,CAApC;AAMA,QAAMC,MAAM,GAAGV,OAAO,CAAC,MAAM;AAC3B,UAAMU,MAAM,GAAG,IAAIT,KAAK,CAACU,IAAN,CAAWC,YAAf,EAAf;AAEAN,IAAAA,MAAM,CAACO,OAAP,CAAeC,KAAK,IAAI;AACtBJ,MAAAA,MAAM,CAACK,MAAP,CAAc,IAAId,KAAK,CAACU,IAAN,CAAWK,MAAf,CAAsBF,KAAK,CAACN,GAA5B,EAAiCM,KAAK,CAACL,GAAvC,CAAd;AACD,KAFD;AAGA,WAAOC,MAAP;AACD,GAPqB,EAOnB,CAACJ,MAAD,CAPmB,CAAtB;AASA,sBAAO;AAAA,4BACP,QAAC,GAAD,CAAK;AAAL;AACM,MAAA,MAAM,EAAE;AACN;AACAE,QAAAA,GAAG,EAAE,SAFC;AAGNC,QAAAA,GAAG,EAAE;AAHC,OADd;AAMM,MAAA,KAAK,EAAE;AACLQ,QAAAA,KAAK,EAAE,MADF;AAELC,QAAAA,MAAM,EAAE;AAFH,OANb;AAUM,MAAA,KAAK,EAAE,CAVb,CAUgB;AAVhB;AAWM,MAAA,QAAQ,EAAEb,MAXhB;AAAA,gBAaOC,MAAM,CAACF,GAAP,CAAWU,KAAK,iBAAI,QAAC,SAAD;AAA6C,QAAA,QAAQ,EAAEA;AAAvD,SAAiB,GAAEA,KAAK,CAACN,GAAI,IAAGM,KAAK,CAACL,GAAI,EAA1C;AAAA;AAAA;AAAA;AAAA,cAApB;AAbP;AAAA;AAAA;AAAA;AAAA,YADO,eAgBH;AACE,MAAA,OAAO,EAAE,MAAM;AACb,YAAIL,GAAJ,EAASA,GAAG,CAACe,SAAJ,CAAcT,MAAd;AACV,OAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBG;AAAA,kBAAP;AAwBH;;GAzCQP,Q;;KAAAA,Q;AA2CT,eAAeA,QAAf","sourcesContent":["import { Map, MapMarker } from 'react-kakao-maps-sdk';\r\nimport React, {useState, useMemo} from \"react\";\r\nconst { kakao } = window; \r\n\r\nfunction LocalMap() {\r\n    const [map, setMap] = useState()\r\n    const [points, setPoints] = useState([\r\n      {lat: 33.452278, lng:126.567803},\r\n      {lat: 33.452671, lng:126.574792},\r\n      {lat: 33.451744, lng:126.572441},\r\n    ])\r\n\r\n    const bounds = useMemo(() => {\r\n      const bounds = new kakao.maps.LatLngBounds();\r\n\r\n      points.forEach(point => {\r\n        bounds.extend(new kakao.maps.LatLng(point.lat, point.lng))\r\n      });\r\n      return bounds;\r\n    }, [points])\r\n\r\n    return(<>\r\n    <Map // 지도를 표시할 Container\r\n          center={{\r\n            // 지도의 중심좌표\r\n            lat: 33.450701,\r\n            lng: 126.570667,\r\n          }}\r\n          style={{\r\n            width: \"100%\",\r\n            height: \"450px\",\r\n          }}\r\n          level={3} // 지도의 확대 레벨\r\n          onCreate={setMap}\r\n        >\r\n          {points.map(point => <MapMarker key={`${point.lat}-${point.lng}`} position={point} />)}\r\n        </Map>\r\n        <button\r\n          onClick={() => {\r\n            if (map) map.setBounds(bounds)\r\n          }}\r\n        >\r\n          지도 범위 재설정 하기\r\n        </button>\r\n    </>);\r\n}\r\n\r\nexport default LocalMap;"]},"metadata":{},"sourceType":"module"}